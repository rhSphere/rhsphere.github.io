<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[认识SSM框架和Redis]]></title>
    <url>%2F2019%2F01%2F26%2FSSM-framework-Redis.html</url>
    <content type="text"><![CDATA[文章对以下要点进行总结和归纳：1)了解Spring IoC和Spring AOP的基础概念；2)了解MyBatis的特点；3)了解Spring MVC的特点；4)了解为什么要使用NoSQL(Redis)及Redis的优点；5)掌握SSM和Redis的基本结构框图和各种技术的作用。 1.Spring框架Spring框架是Java应用最广的框架，它优秀的理念包括 IoC (Inversion of Control, 控制反转)和 AOP (Aspect Oriented Programming, 面向切面编程)。 1.1 Spring IoC简介Spring IoC（Inversion of Control，控制反转）承担了一个资源管理、整合、即插即拔的功能。举个例子，在Java中我们为国家插座设计两种接口，那我们就可以为两种插座分别new两个对象，但是如果要更改上千次这种插座，难道要new很多对象吗？所以不用new的方式创建对象，而是使用配置的方式，然后使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。不需要去找资源(Bean)，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源，这就是Spring IoC的理念。这样就把Bean之间的依赖关系解耦了，更容易写出结构清晰的程序。除此之外，Spring IoC还提供对Java Bean生命周期的管理，可以延迟加载，可以在其生命周期内定义一些行为等，更加有效地使用和管理Java资源。如果使用new的方式来使用插座，代码如下。使用插座11234User user = new User();Socket socket = new Socket1();user.setSocket(socket);user.useSocket(); 这样会有一个弊端，如果使用其他插座，就需要修改代码。可以使用配置的方式代替new的方式创建对象，让Spring IoC容器通过配置去找到插座。使用Spring IoC注入插座1个用户1234&lt;bean id="socket" class="Socket1" /&gt;&lt;bean id="user" class="xxx.User"&gt; &lt;property name="socket" ref="socket" /&gt;&lt;/bean&gt; 只需要修改XML配置文件，就可以切换：切换插座的实现类12345- &lt;bean id="socket" class="Socket1" /&gt;+ &lt;bean id="socket" class="Socket2" /&gt;&lt;bean id="user" class="xxx.User"&gt; &lt;property name="socket" ref="socket" /&gt;&lt;/bean&gt; 1.2 Spring AOP2.MyBatis简介2.1 Hibernate简介2.2 MyBatis2.3 Hibernate和MyBatis的区别3.Spring MVC简介4.最流行的NoSQL – Redis5.SSM+Redis结构框图及概述]]></content>
      <categories>
        <category>Java EE</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Spring MVC</tag>
        <tag>MyBatis</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
</search>
