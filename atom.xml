<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Depeng&#39;s Blog</title>
  
  <subtitle>北京邮电大学研究生在读</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.blogs.rhsphere.com/"/>
  <updated>2019-01-18T08:18:47.000Z</updated>
  <id>https://www.blogs.rhsphere.com/</id>
  
  <author>
    <name>Depeng Lu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ARM教材格式</title>
    <link href="https://www.blogs.rhsphere.com/ARM/%E6%A0%BC%E5%BC%8F/2019/01/18/ARM%E6%95%99%E6%9D%90%E6%A0%BC%E5%BC%8F.html"/>
    <id>https://www.blogs.rhsphere.com/ARM/格式/2019/01/18/ARM教材格式.html</id>
    <published>2019-01-18T08:18:47.000Z</published>
    <updated>2019-01-18T08:18:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>标题使用模板word文件，文件名：ARM教材模板文件.word，在顶部工具栏中-&gt;样式中-&gt;往后选设置了如名字为标题1、标题2等格式，格式已经设置好直接使用。</p><ol><li>一级标题  为章节标题，使用不到。</li><li>二级标题<br>格式为如 2.6  ARM处理器的寄存器组织，数字序号与汉字空两格，使用标题2格式刷即可。</li><li>三级标题  使用方法同二级标题</li></ol><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>样式中设置了好了名字为正文格式的样式，选中每一段落后点改样式即可。<br>中文  宋体 五号字体  西文 Times New Roman 五号字体</p><p>图名在图片下方<br>图名命名方式为 图2-1  具体的图名，数字序号与汉字空两格，使用01_图头格式刷即可。<br><strong>注意：图片务必使用vision画图，自己画出来，图中字体的的格式同正文，使图片字体清晰即可，不会使用visio或者画完图后不会转换成pdf或者图片格式的可以询问倪博</strong></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>表名在表的上方，<br>图名命名方式为 表2-1  具体的图名，数字序号与汉字空两格，使用04_表头格式刷即可。<br>表格中字体参考  田老师给的资料中的word <strong>第1，2章 微型计算机原理及应用-2.doc</strong><br><strong>图名和表名在文中必须清楚地引用，比如：“如图2-1所示” 或者 “如表2-2所示”</strong></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>代码字体 中文 宋体 五号  英文 Times New Roman</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>区分中英文的括号，区分中英文逗号，引号和分号等</li><li>代码注释需要正确注释</li><li><strong>参考田老师给的资料中的word 第1，2章 微型计算机原理及应用-2.doc</strong></li><li>给的模板word中设置好了正文格式、标题格式、图头和表头格式，未设置表格中字体格式和代码字体格式，按照前面所说的先写即可。</li><li>文章参考借鉴时，直接粘贴过来注意修改，段落语意是否流畅，<strong>不要随意堆砌文字，导致段落主语混乱、逻辑混乱、语意重复等问题</strong>，自己多修改</li><li>参考资料在群里，自己可以找一些电子版的，然后我给大家下载下来。</li></ol>]]></content>
    
    <summary type="html">
    
      本次教材的部分参考格式，大家可以按照文中的要求来写，有问题请及时沟通交流。
    
    </summary>
    
      <category term="ARM" scheme="https://www.blogs.rhsphere.com/categories/ARM/"/>
    
      <category term="格式" scheme="https://www.blogs.rhsphere.com/categories/ARM/%E6%A0%BC%E5%BC%8F/"/>
    
    
      <category term="ARM教材" scheme="https://www.blogs.rhsphere.com/tags/ARM%E6%95%99%E6%9D%90/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript</title>
    <link href="https://www.blogs.rhsphere.com/web%E5%89%8D%E7%AB%AF/2019/01/14/JavaScript.html"/>
    <id>https://www.blogs.rhsphere.com/web前端/2019/01/14/JavaScript.html</id>
    <published>2019-01-14T08:04:05.000Z</published>
    <updated>2019-01-18T08:37:25.456Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript 是面向对象的语言，但 JavaScript 不使用类。</p><p>在 JavaScript 中，不会创建类，也不会通过类来创建对象（就像在其他面向对象的语言中那样）。</p><p>JavaScript 基于 prototype，而不是基于类的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span> <span class="comment">//声明变量var</span></span><br><span class="line">ES6 支持反引号 <span class="string">``</span>多行字符串</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">"/static/js/abc.js"</span> type=<span class="string">"javascript"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span></span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">如果有很多变量需要连接，用+号就比较麻烦。ES6新增了一种模板字符串，表示方法和上面的多行字符串一样，但是它会自动替换字符串中的变量：</span></span><br><span class="line"><span class="xml">var name = '小明';</span></span><br><span class="line"><span class="xml">var age = 20;</span></span><br><span class="line"><span class="xml">var message = `你好, $&#123;name&#125;, 你今年$&#123;age&#125;岁了!`;</span></span><br><span class="line"><span class="xml">alert(message);</span></span><br></pre></td></tr></table></figure><p>单双引号均可</p><p>但是JavaScript的对象有个小问题，就是键必须是字符串。但实际上Number或者其他数据类型作为键也是非常合理的。</p><p>为了解决这个问题，最新的ES6规范引入了新的数据类型Map</p><p>Set和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key。</p><p>遍历Array可以采用下标循环，遍历Map和Set就无法使用下标。为了统一集合类型，ES6标准引入了新的iterable类型，Array、Map和Set都属于iterable类型。</p><p>具有iterable类型的集合可以通过新的for … of循环来遍历。</p><p>for … of循环是ES6引入的新的语法，请测试你的浏览器是否支持</p><p>此时abs(x)函数的参数x将收到undefined，计算结果为NaN。</p><p>要避免收到undefined，可以对参数进行检查：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(a, b, <span class="rest_arg">...rest</span>)</span> </span>&#123;</span><br><span class="line">    console.log(<span class="string">'a = '</span> + a);</span><br><span class="line">    console.log(<span class="string">'b = '</span> + b);</span><br><span class="line">    console.log(rest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解构赋值<br>变量提升<br>JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部：<br>为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量：</p><p>在一个对象中绑定函数，称为这个对象的方法。在一个方法内部，this是一个特殊变量，它始终指向当前对象，也就是xiaoming这个变量。所以，this.birth可以拿到xiaoming的birth属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">    <span class="keyword">return</span> y - <span class="keyword">this</span>.birth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    name: <span class="string">'小明'</span>,</span><br><span class="line">    birth: <span class="number">1990</span>,</span><br><span class="line">    age: getAge</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.age(); <span class="comment">// 25, 正常结果</span></span><br><span class="line">getAge(); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>单独调用函数getAge()怎么返回了NaN？请注意，我们已经进入到了JavaScript的一个大坑里。</p><p>JavaScript的函数内部如果调用了this，那么这个this到底指向谁？</p><p>答案是，视情况而定！</p><p>如果以对象的方法形式调用，比如xiaoming.age()，该函数的this指向被调用的对象，也就是xiaoming，这是符合我们预期的。</p><p>如果单独调用函数，比如getAge()，此时，该函数的this指向全局对象，也就是window。</p><p>坑爹啊！</p><p>虽然在一个独立的函数调用中，根据是否是strict模式，this指向undefined或window，不过，我们还是可以控制this的指向的！</p><p>要指定函数的this指向哪个对象，可以用函数本身的apply方法，它接收两个参数，第一个参数就是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。</p><p>用apply修复getAge()调用：</p><p>另一个与apply()类似的方法是call()，唯一区别是：</p><p>apply()把参数打包成Array再传入；</p><p>call()把参数按顺序传入。</p><p>比如调用Math.max(3, 5, 4)，分别用apply()和call()实现如下：</p><p>返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化的变量。<br>如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：<br>注意这里用了一个“创建一个匿名函数并立刻执行”的语法：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">function</span> (<span class="name">x</span>) &#123;</span><br><span class="line">    return x * x;</span><br><span class="line">&#125;)(<span class="number">3</span>)<span class="comment">; // 9</span></span><br></pre></td></tr></table></figure><p>理论上讲，创建一个匿名函数并立刻执行可以这么写：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title"></span>(x) &#123; <span class="keyword">return</span> <span class="type">x</span> * x &#125; (<span class="number">3</span>);</span><br></pre></td></tr></table></figure></p><p>但是由于JavaScript语法解析的问题，会报SyntaxError错误，因此需要用括号把整个函数定义括起来<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">function</span> (<span class="name">x</span>) &#123; return x * x &#125;) (<span class="number">3</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>通常，一个立即执行的匿名函数可以把函数体拆开，一般这么写：<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">function</span> (<span class="name">x</span>) &#123;</span><br><span class="line">    return x * x;</span><br><span class="line">&#125;)(<span class="number">3</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>说了这么多，难道闭包就是为了返回一个函数然后延迟执行吗？</p><p>当然不是！闭包有非常强大的功能。举个栗子：</p><p>在面向对象的程序设计语言里，比如Java和C++，要在对象内部封装一个私有变量，可以用private修饰一个成员变量。</p><p>在没有class机制，只有函数的语言里，借助闭包，同样可以封装一个私有变量。我们用JavaScript创建一个计数器：</p><p>generator还有另一个巨大的好处，就是把异步回调代码变成“同步”代码。这个好处要等到后面学了AJAX以后才能体会到。</p><p>没有generator之前的黑暗时代，用AJAX时需要这么写代码：</p><p>总结一下，有这么几条规则需要遵守：</p><ul><li><p>不要使用new Number()、new Boolean()、new String()创建包装对象；</p></li><li><p>用parseInt()或parseFloat()来转换任意类型到number；</p></li><li><p>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</p></li></ul><p>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {…}；</p><p>typeof操作符可以判断出number、boolean、string、function和undefined；</p><p>判断Array要使用Array.isArray(arr)；</p><p>判断null请使用myVar === null；</p><p>判断某个全局变量是否存在用typeof window.myVar === ‘undefined’；</p><p>函数内部判断某个变量是否存在用typeof myVar === ‘undefined’。</p><p>最后有细心的同学指出，任何对象都有toString()方法吗？null和undefined就没有！确实如此，这两个特殊值要除外，虽然null还伪装成了object类型。</p><p>var ajax = ajaxGet(‘http://…’);<br>ajax.ifSuccess(success)<br>    .ifFail(fail);</p><p>这种链式写法的好处在于，先统一执行AJAX逻辑，不关心如何处理结果，然后，根据结果是成功还是失败，在将来的某个时候调用success函数或fail函数。</p><p>古人云：“君子一诺千金”，这种“承诺将来会执行”的对象在JavaScript中称为Promise对象。</p><p>window.setInterval(“javascript function”,milliseconds);</p><p>myVar= window.setTimeout(“javascript function”, milliseconds);</p>]]></content>
    
    <summary type="html">
    
      JavaScript是面向对象的语言，但JavaScript不使用类。在JavaScript中，不会创建类，也不会通过类来创建对象（就像在其他面向对象的语言中那样）。JavaScript基于prototype，而不是基于类的。但是JavaScript的对象有个小问题，就是键必须是字符串。但实际上Number或者其他数据类型作为键也是非常合理的。为了解决这个问题，最新的ES6规范引入了新的数据类型Map。
    
    </summary>
    
      <category term="web前端" scheme="https://www.blogs.rhsphere.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://www.blogs.rhsphere.com/tags/JavaScript/"/>
    
      <category term="编程" scheme="https://www.blogs.rhsphere.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>SQL学习笔记</title>
    <link href="https://www.blogs.rhsphere.com/MySQL/2019/01/14/SQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
    <id>https://www.blogs.rhsphere.com/MySQL/2019/01/14/SQL学习笔记.html</id>
    <published>2019-01-14T03:32:28.000Z</published>
    <updated>2019-01-18T08:38:06.150Z</updated>
    
    <content type="html"><![CDATA[<p>#SQL语句基础<br>Structured Query Language<br>操作和检索关系型数据库的标准语言，标准的SQL语句可以用于操作任何关系数据库。<br>一般程序员负责：</p><ul><li>在数据库中检索信息</li><li>对数据库的信息进行更新</li><li>改变数据库的结构<br>DBA负责：</li><li>更改系统的安全设置</li><li>增加或回收用户对数据库、表的许可权限</li></ul><p><b>行：表中的一个记录  有时也被称为记录</b><br><b>主键：一列或者一组列，其值能够唯一标识表中的每一行。便于更新和删除特定的行。</b></p><p>##SQL语句类型</p><ol><li>查询语句:主要是由select关键字完成，查询语句是SQL语句中最复杂、功能最丰富的语句</li><li>DML（Data Manipulation L, 数据操作语言）语句：主要有insert、update和delete三个关键字完成</li><li>DDL（Data Defination L，数据定义语言）语句：主要由create、alter、drop和truncate四个关键字完成</li><li>DCL（Data Control L, 数据控制语言）语句：主要由grant和revoke两个关键字完成 <em>为数据库用户授权，或者访问指定用户的权限</em></li><li>事务控制语句：主要有commit、rollback和savepoint三个关键字完成</li></ol><p>##DDL语句</p><ul><li><p>创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> [SchemaName.]tableName</span><br><span class="line">(</span><br><span class="line">columnName datatype [<span class="keyword">default</span> expr]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span> </span><br><span class="line">(</span><br><span class="line">test_id <span class="built_in">int</span>,</span><br><span class="line">test_price <span class="built_in">decimal</span>,</span><br><span class="line">test_name <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">default</span> <span class="string">'xxx'</span>,</span><br><span class="line">test_desc <span class="built_in">text</span>,</span><br><span class="line">test_img <span class="built_in">blob</span>,</span><br><span class="line">test_date datetime</span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> thesame <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> user_inf;</span><br><span class="line"><span class="comment">#选中和user_inf完全相同的字段和数据建表</span></span><br></pre></td></tr></table></figure></li><li><p>修改表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#增加列定义</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tableName</span><br><span class="line"><span class="keyword">add</span></span><br><span class="line">(</span><br><span class="line">column_name datatype [<span class="keyword">default</span> expr],</span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> hehe <span class="keyword">add</span> hehe_id <span class="built_in">int</span>;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> hehe </span><br><span class="line"><span class="keyword">add</span></span><br><span class="line">(</span><br><span class="line">aaa <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">default</span> <span class="string">'xxx'</span>,</span><br><span class="line">bbb <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改列定义</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> hehe</span><br><span class="line"><span class="keyword">modify</span> hehe_id <span class="built_in">varchar</span>(<span class="number">255</span>);</span><br><span class="line"><span class="comment">#同时修改列名</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> hehe</span><br><span class="line"><span class="keyword">change</span> hehe_id abc <span class="built_in">int</span>;</span><br><span class="line"><span class="comment">#将表重命名</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> hehe</span><br><span class="line"><span class="keyword">rename</span> <span class="keyword">to</span> wawa;</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改列名</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> TABLENAME <span class="keyword">change</span> old_ColNAME new_ColNAME <span class="built_in">char</span>(<span class="built_in">int</span> ect..);</span><br></pre></td></tr></table></figure></li><li><p>删除表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> wawa;</span><br></pre></td></tr></table></figure></li></ul><p>##数据库约束</p><ul><li>5种完整性约束</li></ul><ol><li>NOT NULL:非空约束，指定某列不能为空</li><li>UNIQUE:唯一约束，制定某列或某几列不能重复</li><li>PRIMARY KEY:主键，指定该列的值可以唯一地标识该记录</li><li>FOREIGN KEY:外键，指定该行记录从属于主表中的一条记录，主要用于保证参照完整性</li><li>CHECK:</li></ol><ul><li>约束分类</li></ul><ol><li>单列约束</li><li>多列约束<br>-指定约束的两个时机</li><li>建表的同时为相应的数据制定约束</li><li>以修改表的方式来增加约束</li></ol><ul><li><p>NOT NULL约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> hehe</span><br><span class="line">(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>) defalut <span class="string">'ldp'</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">gender <span class="built_in">varchar</span>(<span class="number">2</span>) <span class="literal">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> hehe</span><br><span class="line"><span class="keyword">modify</span> gender <span class="built_in">varchar</span>(<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> hehe</span><br><span class="line"><span class="keyword">modify</span> <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">2</span>) <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> hehe</span><br><span class="line"><span class="keyword">modify</span> <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">default</span> <span class="string">'abc'</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li><li><p>UNIQUE约束<br>保证指定列或者指定列组合不允许出现重复值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列级约束语法建立约束，</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> unique_test</span><br><span class="line">(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unique</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>).</span><br><span class="line">pass <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="keyword">unique</span> （<span class="keyword">name</span>)，</span><br><span class="line"><span class="keyword">constraint</span> uk <span class="keyword">unique</span>(pass)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test1</span><br><span class="line">(</span><br><span class="line"><span class="keyword">id</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">pass <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="keyword">constraint</span> uk1 <span class="keyword">unique</span>(<span class="keyword">name</span>, pass)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test1 <span class="keyword">drop</span> <span class="keyword">index</span> uk1;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test1 <span class="keyword">add</span> <span class="keyword">unique</span>(<span class="keyword">name</span>, pass);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> test1 <span class="keyword">modify</span> <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unique</span>;</span><br></pre></td></tr></table></figure></li><li><p>PRIMARY KEY约束<br>主键约束相当于非空约束和唯一约束，即主键约束的列即不允许出现重复值，也不允许出现null值；如果对多列组合建立主键约束，则多列里包含的每一列都不能为空，但只要求这些列组合不能重复。主键列的值用于唯一标识表中的一条记录。<br>建表时使用列级约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> primary_test</span><br><span class="line">(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><p>建表时创建主键约束，使用表级约束法<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> primary_test1</span><br><span class="line">(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">pass <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="comment">#对于MySQL而言，test1_pk主键约束名无效，PRIMARY是主键约束名</span></span><br><span class="line"><span class="keyword">constraint</span> test1_pk primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>建表时以多列建立组合主键，使用表级约束<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> primary_test2</span><br><span class="line">(</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">pass <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> primary_test2</span><br><span class="line"><span class="keyword">drop</span> primary <span class="keyword">key</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> primary_test2</span><br><span class="line"><span class="keyword">add</span> primary <span class="keyword">key</span>(<span class="keyword">name</span>, pass);</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> primary_test2</span><br><span class="line"><span class="keyword">modify</span> <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>) primary <span class="keyword">key</span>;</span><br></pre></td></tr></table></figure></p><p>建立自增长的主键约束<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> primary_test3</span><br><span class="line">(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> auto_increment primary <span class="keyword">key</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">pass <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">)；</span><br></pre></td></tr></table></figure></p><ul><li>FOREIGEN KEY约束<br><strong>MySQL会为该外键约束命名为tableName_ibfk_n</strong><br>从表的外键参照的只能是主表的主键列或者唯一键列。主表记录不允许被删除。<br>外键约束通常用于定义两个实体之间的一对多、一对一的关联关系。<br>对于一对多的关联关系，通常再多的一端增加外键列；一对一的关联关系，选择任意一方来增加外键列，被增加外键列的表被称为从表；对于多对多的关联关系，需要额外增加一个连接表来记录他们的关联关系。<br>列级约束法建立外键约束直接使用references关键字<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列级约束法</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher_table</span><br><span class="line">(</span><br><span class="line">teacher_id <span class="built_in">int</span> auto_increment,</span><br><span class="line">teacher_name <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">primary <span class="keyword">key</span>(teacher_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student_table</span><br><span class="line">(</span><br><span class="line">student_id <span class="built_in">int</span> auto_increment primary <span class="keyword">key</span>,</span><br><span class="line">student_name <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">java_teacher <span class="built_in">int</span> <span class="keyword">references</span> teacher_table(teacher_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#表级约束法</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher_table1</span><br><span class="line">(</span><br><span class="line">teacher_id <span class="built_in">int</span> auto_increment,</span><br><span class="line">teacher_name <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">primary <span class="keyword">key</span>(teacher_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student_table1</span><br><span class="line">(</span><br><span class="line">student_id <span class="built_in">int</span> auto_increment primary <span class="keyword">key</span>,</span><br><span class="line">student_name <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">java_teacher <span class="built_in">int</span>，</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(java_teacher) <span class="keyword">references</span> teacher_table1(teacher_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#表级约束法,显示指定外键约束的名字</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher_table2</span><br><span class="line">(</span><br><span class="line">teacher_id <span class="built_in">int</span> auto_increment,</span><br><span class="line">teacher_name <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">primary <span class="keyword">key</span>(teacher_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student_table2</span><br><span class="line">(</span><br><span class="line">student_id <span class="built_in">int</span> auto_increment primary <span class="keyword">key</span>,</span><br><span class="line">student_name <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">java_teacher <span class="built_in">int</span>，</span><br><span class="line"><span class="keyword">constraint</span> student_teacher_fk <span class="keyword">foreign</span> <span class="keyword">key</span>(java_teacher) <span class="keyword">references</span></span><br><span class="line"> teacher_table2(teacher_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#多列组合的外键约束，则必须使用表级约束法</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher_table3</span><br><span class="line">(</span><br><span class="line">teacher_name <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">teacher_pass <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">primary <span class="keyword">key</span>(teacher_name, teacher_pass)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student_table3</span><br><span class="line">(</span><br><span class="line">student_id <span class="built_in">int</span> auto_increment primary <span class="keyword">key</span>,</span><br><span class="line">student_name <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">java_teacher_name <span class="built_in">varchar</span>(<span class="number">255</span>)，</span><br><span class="line">java_teacher_pass <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(java_teache_name, java_teacher_pass)</span><br><span class="line"> <span class="keyword">references</span> teacher_table3(teacher_name, teacher_pass)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student_table3</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">foreign</span> <span class="keyword">key</span> student_table3_ibfk_1;</span><br><span class="line"><span class="comment">#修改</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student_table3</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">foreign</span> <span class="keyword">key</span>(java_teacher_name, java_teacher_pass)</span><br><span class="line">  <span class="keyword">references</span> teacher_table3(teacher_name, teacher_pass);</span><br></pre></td></tr></table></figure></li></ul><p><strong>自关联</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> foreign_test</span><br><span class="line">(</span><br><span class="line">foreign_id <span class="built_in">int</span> auto_increment primary <span class="keyword">key</span>,</span><br><span class="line">foreign_name <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">refer_id <span class="built_in">int</span>,</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(refer_id) <span class="keyword">references</span> foreign_test(foreign_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p><strong>级联删除、或者从表都设置为null</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher_table4</span><br><span class="line">(</span><br><span class="line">teacher_id <span class="built_in">int</span> auto_increment,</span><br><span class="line">teacher_name <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">primary <span class="keyword">key</span>(teacher_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student_table4</span><br><span class="line">(</span><br><span class="line">student_id <span class="built_in">int</span> auto_increment primary <span class="keyword">key</span>,</span><br><span class="line">student_name <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">java_teacher <span class="built_in">int</span>,</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span>(java_teacher) <span class="keyword">references</span> teacher_table4(teacher_id)</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span> <span class="comment">#或者用on delete set null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><ul><li>索引<br>创建方式：</li></ul><ol><li>定义主键约束、唯一约束、和外键约束是，系统自动创建索引</li><li>手动<br>删除方式：</li><li>数据表被删除时，自动</li><li>手动</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> index_name <span class="keyword">on</span> tableName (<span class="keyword">colum</span>[, <span class="keyword">column</span>]...);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> emp_last_name_idx</span><br><span class="line"><span class="keyword">on</span> emplees(last_name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> emp_last_name_idx1</span><br><span class="line"><span class="keyword">on</span> emplees(first_name, last_name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> emp_last)name_idx2</span><br><span class="line"><span class="keyword">on</span> emplees;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">index</span> <span class="keyword">from</span> tableName;</span><br></pre></td></tr></table></figure><p>##DML<br>完成三个任务：</p><ul><li>插入新数据</li><li>修改已有数据</li><li>删除不需要的数据</li></ul><ol><li><p>insert into语句<br>插入语句，每次只能插入一条记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tableName(<span class="keyword">column</span>) <span class="keyword">values</span>(<span class="keyword">value</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student_table2(student_name)</span><br><span class="line"><span class="keyword">select</span> techer_name <span class="keyword">from</span> tescher_table2;</span><br></pre></td></tr></table></figure></li><li><p>update 语句<br>修改多条记录</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> table_name <span class="keyword">set</span> column1 = <span class="keyword">value</span>[, column2 = value2]</span><br><span class="line"><span class="keyword">where</span> condition;</span><br></pre></td></tr></table></figure></li><li><p>delete from语句<br>整行的删除</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tableName</span><br><span class="line"><span class="keyword">where</span> teacher_id &gt; <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li></ol><p>##表单查询<br>*表示所有列<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> teacher_table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> student_name <span class="keyword">from</span> student_table</span><br><span class="line"><span class="keyword">where</span> java_teacher &gt; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> teacher_id + <span class="number">5</span> </span><br><span class="line"><span class="keyword">from</span> teacher_table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> teacher_table</span><br><span class="line"><span class="keyword">where</span> teacher_id * <span class="number">3</span> &gt; <span class="number">4</span>;</span><br></pre></td></tr></table></figure></p><p>select 需要指明选择什么，以及在哪里选择<br>数据格式是表示问题，而不是检索问题<br><strong>检索不同的值</strong> select distinct id from tableNmae;<br><strong>检索前五个</strong><br>select prod_name from Products limit 5 offset 5;<br>捷径<br>select prod_name from Products limit 5, 5;</p><p>排序<br>select prod_name from Products<br>order by prod_name;<br>多列排序<br>select prod_id, prod_price, prod_name<br>from Products<br>order by prod_price, prod_name;<br>按列位置排序<br>select prod_id, prod_price, prod_name<br>from Products<br>order by 2, 3;</p><p>降序排序<br>select prod_id, prod_price, prod_name<br>from Products<br>order by prod_price desc;</p><p>多列降序排序：必须对每一个列指定desc关键字<br>select prod_id, prod_price, prod_name<br>from Products<br>order by prod_price desc, prod_name;</p><p>过滤数据<br>只检索所需数据需要指定搜索条件（search criteria),搜索条件也叫过滤条件（filter condition)<br>select prod_name, prod_price<br>from Products<br>where prod_price = 3.49;</p><p><strong>同时使用order by和where时，应该让order by在where后面</strong></p><p>select prod_name, prod_price from Products<br>where prod_price &lt; 10;</p><p>select vend_id, prod_name from Products<br>where vend_id &lt;&gt; ‘DLL01’;</p><p>select prod_name, prod_price from Products<br>where prod_price between 5 and 10;</p><p>select prod_name from Products where prod_price is null;</p><p>select cust_name from Customers where cust_email is null;</p><p>组合where子句</p><ol><li><p>and操作符<br>select prod_id, prod_price, prod_name<br>from Products<br>where vend_id = ‘DLL01’ and prod_price &lt;= 4;</p></li><li><p>or<br>select prod_name, prod_price from Products<br>where vend_id = ‘DLL01’ or vend_id = ‘BRS01’;</p></li><li><p>and的优先级比or更高，使用圆括号分组<br>select prod_name, prod_price from Products<br>where (vend_id = ‘DLL01’ or vend_id = ‘BRS01’)<br>  and prod_price &gt;= 10;</p></li><li><p>in<br>有很多合法选项时，in更加清楚、直观<br>select prod_name, prod_price<br>from Products<br>where vend_id in (‘DLL01’, ‘BRS01’)<br>order by prod_price;</p></li><li><p>not<br>not否定in、between、exists子句<br>select prod_name from Products<br>where not vend_id = ‘DLL01’<br>order by prod_name desc;</p></li></ol><p>##通配符过滤</p><ol><li>like<br>select prod_id, prod_name<br>from Products<br>where prod_name like ‘Fish%’;</li></ol><p>select prod_id, prod_name from Products<br>where prod_name like ‘%bean bag%’;</p><p>select prod_id, prod_name<br>from Products<br>where prod_name like ‘__ inch teddy bear’;</p><p>%字符匹配多个字符，_只匹配一个字符</p><p>select cust_contact from Customers<br>where cust_contact like ‘J%’<br>order by cust_contact;</p><p>select cust_contact from Customers<br>where cust_contact like ‘[^JM]%’<br>order by cust_contact;</p><p>select concat(vend_name, vend_country) from vendors<br>order by vend_name;<br>select concat(rtrim(vend_name), rtrim(vend_country))<br>from vendors order by vend_name;</p><p>select concat(vend_name, vend_country) as vend_title<br>from Vendors order by vend_name;</p><p>select concat(vend_name, ‘( ‘, vend_country, ‘)’)<br>as vend_title from Vendors order by vend_name;<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> prod_id, quantity, item_price, quantity*item_price <span class="keyword">as</span> expanded_price</span><br><span class="line"><span class="keyword">from</span> OrderItems</span><br><span class="line"><span class="keyword">where</span> order_num = <span class="number">20008</span>;</span><br></pre></td></tr></table></figure></p><p>select order_num from Orders where year(order_date) = 2012;</p><p>##汇总数据<br>select avg(prod_price) as avg_price from Products;<br>select avg(prod_price) as avg_price<br>from Products<br>where vend_id = ‘DLL01’;</p><p>count()函数 确定行中的数目或符合特定条件的行的数目。<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(*) <span class="keyword">as</span> num_cust <span class="keyword">from</span> Customers;</span><br></pre></td></tr></table></figure></p><p>select count(cust_email) as num_cust from Customers;</p><p>select sum(quantity) as items_ordered from OrderItems<br>where order_num = 20005;</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(quantity*item_price) <span class="keyword">as</span> total_price <span class="keyword">from</span> OrderItems</span><br><span class="line"><span class="keyword">where</span> order_num = <span class="number">20005</span>;</span><br></pre></td></tr></table></figure><p>select sum(quantity) as items_ordered from OrderItems<br>where order_num = 20005;</p><p>select avg(distinct prod_price) as avg_price from Products where vend_id = ‘DLL01’;</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> vend_id, count<span class="comment">(*) as num_prods from products</span></span><br><span class="line"><span class="comment">group by vend_id</span></span><br><span class="line"><span class="comment">having count(*)</span> &gt;= <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>where过滤行，having过滤分组</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_id, count<span class="comment">(*) as order from Orders</span></span><br><span class="line"><span class="comment">group by cust_id</span></span><br><span class="line"><span class="comment">having count(*)</span> &gt;= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> cust_id, count<span class="comment">(*) as orders</span></span><br><span class="line"><span class="comment">from Orders</span></span><br><span class="line"><span class="comment">group by cust_id</span></span><br><span class="line"><span class="comment">having count(*)</span> &gt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>where在分组前行过滤，having在分组后</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> vend_id, count<span class="comment">(*) as num_prods</span></span><br><span class="line"><span class="comment">from Products</span></span><br><span class="line"><span class="comment">where prod_price &gt;= 4</span></span><br><span class="line"><span class="comment">group by vend_id</span></span><br><span class="line"><span class="comment">having count(*)</span> &gt;= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> vend_id, count<span class="comment">(*) as num_prods</span></span><br><span class="line"><span class="comment">from Products</span></span><br><span class="line"><span class="comment">group by vend_id</span></span><br><span class="line"><span class="comment">having count(*)</span> &gt;= <span class="number">2</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">order by</th><th style="text-align:center">group by</th></tr></thead><tbody><tr><td style="text-align:center">对产生的输出排序</td><td style="text-align:center">对行分组，但输出可能不是分组的排序，只可能使用选择列或者表达式列</td></tr></tbody></table><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> order_num, count<span class="comment">(*) as items from OrderItems</span></span><br><span class="line"><span class="comment">group by order_num</span></span><br><span class="line"><span class="comment">having count(*)</span> &gt;= <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> order_num, count<span class="comment">(*) as items from OrderItems</span></span><br><span class="line"><span class="comment">group by order_num</span></span><br><span class="line"><span class="comment">having count(*)</span> &gt;= <span class="number">3</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> items, order_num;</span><br></pre></td></tr></table></figure><p>##子查询<br>查询（query）一般指的是select语句<br>子查询（subquery)嵌套的查询,总是从内向外嵌套</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询订单号</span></span><br><span class="line"><span class="keyword">select</span> order_num <span class="keyword">from</span> OrderItems <span class="keyword">where</span> prod_id =<span class="string">'RGAN01'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> cust_id <span class="keyword">from</span> Orders <span class="keyword">where</span> order_num <span class="keyword">in</span>(<span class="keyword">select</span> order_num <span class="keyword">from</span> OrderItems <span class="keyword">where</span> prod_id =<span class="string">'RGAN01'</span>);</span><br></pre></td></tr></table></figure><p>避免硬编码顾客id，使用子查询<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cust_name, cust_contact <span class="keyword">from</span> Customers</span><br><span class="line"><span class="keyword">where</span> cust_id <span class="keyword">in</span> (<span class="keyword">select</span> cust_id <span class="keyword">from</span> Orders</span><br><span class="line"><span class="keyword">where</span> order_num <span class="keyword">in</span> </span><br><span class="line">(<span class="keyword">select</span> order_num <span class="keyword">from</span> OrderItems </span><br><span class="line"><span class="keyword">where</span> prod_id = <span class="string">'RGAN01'</span>));</span><br></pre></td></tr></table></figure></p><p><strong><em>作为子查询的select语句只能查询单个列</em></strong><br>使用子查询并不总是执行这类数据检索的最有效方法。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#检索特定顾客的订单数目</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">as</span> orders <span class="keyword">from</span> Orders <span class="keyword">where</span> cust_id = <span class="string">'1000000001'</span>;</span><br><span class="line"><span class="comment">#全检索所有顾客的订单数，并按照顾客姓名排序</span></span><br><span class="line"><span class="keyword">select</span> cust_name, cust_state, </span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> Orders <span class="keyword">where</span> Orders.cust_id = Customers.cust_id) <span class="keyword">as</span> orders</span><br><span class="line"><span class="keyword">from</span> Customers <span class="keyword">order</span> <span class="keyword">by</span> cust_name;</span><br></pre></td></tr></table></figure><p><strong>完全限定列名：</strong>指定表名和列名，告诉SQL语言，比较Orders表中的cust_id和当前正从Customers表中检索的cust_id。如果不这样写DBMS会认为是要对Orders表中的cust_id自身进行比较。</p><p>##联结表<br>创建联结表，指定要联结的所有表以及关联他们的方式<br><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> vend_name, prod_name, prod_price</span><br><span class="line"><span class="keyword">from</span> Vendors, Products</span><br><span class="line"><span class="keyword">where</span> Vendors.vend_id = Products.vend_id;</span><br></pre></td></tr></table></figure></p><p><strong>笛卡尔积（cartesian product)</strong><br>没有联结条件的关系返回的结果为笛卡尔积。检索出来的行的树木将是第一个表中的行数乘以第二个表中的行数。<br>select vend_name, prod_name, prod_price<br>from Vendors, Products;</p><p>内联结（inner join)<br>等值联结（equijoin），基于两个表之间的相等测试</p><p>select vend_name, prod_name, prod_price<br>from Vendors inner join Products<br>on Vendors.vend_id = Products.vend_id;</p><p>连接多个表<br>select prod_name, vend_name, prod_price, quantity<br>from OrderItems, Products, Vendors<br>where Products.vend_id = Vendors.vend_id and OrderItems.prod_id = Products.prod_id<br>and order_num = 20007;</p><p>select cust_name, cust_contact from Customers<br>    where cust_id in (select cust_id from Orders<br>                    where order_num in<br>                    (select order_num from OrderItems<br>                        where prod_id = ‘RGAN01’));<br>使用联结表改写上面的语句：<br>select cust_name, cust_contact<br>from Customers, Orders, OrderItems<br>where Customers.cust_id = Orders.cust_id<br>and Orders.order_num = OrderItems.order_num<br>and prod_id = ‘RGAN01’;</p><p><strong><em>联结是SQL中一个中重要、最强大的特性，有效使用联结需要对挂系数据库有基本的了解。</em></strong></p><p>##创建使用高级联结<br>使用表别名：缩短SQL语句；允许在一条select语句中多次使用相同的表。</p><p>select cust_name, cust_contact from Customers as C, Orders as O, OrderItems as OI<br>where C.cust_id = O.cust_id and OI.order_num = O.order_num<br>and prod_id = ‘RGAN01’;</p><p>使用不同联结：<br>自联结（self-join)、自然联结（naturanl join)、外联结(outer join)</p><p>自联结 要给Jim Jones同一公司的所有顾客发送一封信件。<br>首先找出Jim Jones工作的公司，然后找到该公司的所有顾客。<br>select cust_id, cust_name, cust_contact<br>from Customers where cust_name = (select cust_name from Customers where cust_contact = ‘Jim Jones’);<br>等价方法<br>select c1.cust_id, c1.cust_name, c1.cust_contact<br>from Customers as c1, Customers as c2 where c1.cust_name = c2.cust_name<br>and c2.cust_contact = ‘Jim Jones’;</p><p>自然联结<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> C.*, O.order_num, O.order_date, OI.prod_id, OI.quantity, OI.item_price</span><br><span class="line"><span class="keyword">from</span> Customers <span class="keyword">as</span> C, Orders <span class="keyword">as</span> O, OrderItems <span class="keyword">as</span> OI</span><br><span class="line"><span class="keyword">where</span> C.cust_id = O.cust_id <span class="keyword">and</span> OI.order_num = O.order_num</span><br><span class="line"><span class="keyword">and</span> prod_id = <span class="string">'RGAN01'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> Customers.cust_id, Orders.order_num</span><br><span class="line"><span class="keyword">from</span> Customers <span class="keyword">inner</span> <span class="keyword">join</span> Orders <span class="keyword">on</span> Customers.cust_id = Orders.cust_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> Customers.cust_id, Orders.order_num <span class="keyword">from</span> CUstomers <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> Orders</span><br><span class="line"><span class="keyword">on</span> Customers.cust_id = Orders.cust_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> Customers.cust_id, Orders.order_num <span class="keyword">from</span> Customers <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> Orders</span><br><span class="line"><span class="keyword">on</span> Orders.cust_id = Customers.cust_id;</span><br></pre></td></tr></table></figure></p><p>SQL聚集函数<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">avg() count() max() min() sum()</span><br><span class="line">select Customers.cust_id, count(Orders.order_num) as num_ord <span class="keyword">from</span> Customers inner join Orders on Customers.cust_id = Orders.cust_id<span class="built_in"> group </span>by Customers.cust_id;</span><br><span class="line"></span><br><span class="line">select Customers.cust_id, count(Orders.order_num) as num_ord <span class="keyword">from</span> Customers left outer join Orders on Customers.cust_id = Orders.cust_id<span class="built_in"> group </span>by Customers.cust_id;</span><br></pre></td></tr></table></figure></p><p>select into 语句<br>从一个表复制到另一个表<br>create table CustCopy as select * from Customers;</p><p>更新和删除数据<br>使用UPDATE时一定要细心，因为稍有不注意，就会更新表中的所有行。<br>基本的update语句：1）需要更新的表，2）列名和他们的新值，3）确定要更新那些行的过滤条件<br>update Customers set cust_email = <a href="mailto:&#39;kim@thetoystore.com" target="_blank" rel="noopener">&#39;kim@thetoystore.com</a>‘ where cust_id = ‘1000000005’;<br>update Customers set cust_email = <a href="mailto:&#39;kim@thetoystore.com" target="_blank" rel="noopener">&#39;kim@thetoystore.com</a>‘, cust_contact = ‘Sam Roberts’ where cust_id = ‘1000000005’;</p><p>SQL中空字符串用’’表示，是一个值，而NULL表示没有值。</p><p>alter table Vendors drop column vend_phone;</p><p>删除表的内容可以用：delete from custcopy; 和 truncate custcopy;<br>删除表 drop table custcopy;</p><p>视图不包含任何列或数据，包含的是一个查询，被封装起来。<br>视图：</p><ol><li>重用SQL语句。</li><li>简化复杂的SQL操作</li><li>使用表的一部分而不是整个表。</li><li>保护数据。</li><li>更改数据格式和表示。<br>create view 只能创建不存在的视图<br>drop view viewName  删除视图</li></ol><p>create view ProductCustomers as select cust_name, cust_contact, prod_id from Customers, Orders, OrderItems where Customers.cust_id = Orders.cust_id and OrderItems.order_num = Orders.order_num;</p><p>select cust_name, cust_contact from ProductCustomers where prod_id = ‘RGAN01’;</p>]]></content>
    
    <summary type="html">
    
      操作和检索关系型数据库的标准语言，标准的SQL语句可以用于操作任何关系数据库。一般程序员负责：1)在数据库中检索信息；2)对数据库的信息进行更新;3)改变数据库的结构。DBA负责：1)更改系统的安全设置;2)增加或回收用户对数据库、表的许可权限。行：表中的一个记录有时也被称为记录。主键：一列或者一组列，其值能够唯一标识表中的每一行。便于更新和删除特定的行。
    
    </summary>
    
      <category term="MySQL" scheme="https://www.blogs.rhsphere.com/categories/MySQL/"/>
    
    
      <category term="编程" scheme="https://www.blogs.rhsphere.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="MySQL" scheme="https://www.blogs.rhsphere.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.blogs.rhsphere.com/%E6%9D%82%E8%B0%88/2018/12/30/hello-world.html"/>
    <id>https://www.blogs.rhsphere.com/杂谈/2018/12/30/hello-world.html</id>
    <published>2018-12-30T03:32:28.000Z</published>
    <updated>2019-01-15T04:25:39.644Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="杂谈" scheme="https://www.blogs.rhsphere.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="https://www.blogs.rhsphere.com/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
