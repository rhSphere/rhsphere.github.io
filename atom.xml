<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Depeng&#39;s Blog</title>
  
  <subtitle>北京邮电大学研究生在读</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.blogs.rhsphere.com/"/>
  <updated>2019-01-26T07:32:15.058Z</updated>
  <id>https://www.blogs.rhsphere.com/</id>
  
  <author>
    <name>Depeng Lu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>认识SSM框架和Redis</title>
    <link href="https://www.blogs.rhsphere.com/2019/01/26/SSM-framework-Redis.html"/>
    <id>https://www.blogs.rhsphere.com/2019/01/26/SSM-framework-Redis.html</id>
    <published>2019-01-26T06:09:31.000Z</published>
    <updated>2019-01-26T07:32:15.058Z</updated>
    
    <content type="html"><![CDATA[<p class="description">文章对以下要点进行总结和归纳：1)了解Spring IoC和Spring AOP的基础概念；2)了解MyBatis的特点；3)了解Spring MVC的特点；4)了解为什么要使用NoSQL(Redis)及Redis的优点；5)掌握SSM和Redis的基本结构框图和各种技术的作用。</p><a id="more"></a><h2 id="1-Spring框架"><a href="#1-Spring框架" class="headerlink" title="1.Spring框架"></a>1.Spring框架</h2><p>Spring框架是Java应用最广的框架，它优秀的理念包括 <strong>IoC</strong> (Inversion of Control, 控制反转)和 <strong>AOP</strong> (Aspect Oriented Programming, 面向切面编程)。</p><h3 id="1-1-Spring-IoC简介"><a href="#1-1-Spring-IoC简介" class="headerlink" title="1.1  Spring IoC简介"></a>1.1  Spring IoC简介</h3><p>Spring IoC（Inversion of Control，控制反转）承担了一个资源管理、整合、即插即拔的功能。举个例子，在Java中我们为国家插座设计两种接口，那我们就可以为两种插座分别new两个对象，但是如果要更改上千次这种插座，难道要new很多对象吗？所以不用new的方式创建对象，而是使用配置的方式，然后使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。<br>不需要去找资源(Bean)，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源，这就是Spring IoC的理念。这样就把Bean之间的依赖关系解耦了，更容易写出结构清晰的程序。除此之外，Spring IoC还提供对Java Bean生命周期的管理，可以延迟加载，可以在其生命周期内定义一些行为等，更加有效地使用和管理Java资源。<br>如果使用new的方式来使用插座，代码如下。<br><figure class="highlight java"><figcaption><span>使用插座1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket1();</span><br><span class="line">user.setSocket(socket);</span><br><span class="line">user.useSocket();</span><br></pre></td></tr></table></figure></p><p>这样会有一个弊端，如果使用其他插座，就需要修改代码。可以使用配置的方式代替new的方式创建对象，让Spring IoC容器通过配置去找到插座。<br><figure class="highlight xml"><figcaption><span>使用Spring IoC注入插座1个用户</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"socket"</span> <span class="attr">class</span>=<span class="string">"Socket1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"xxx.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"socket"</span> <span class="attr">ref</span>=<span class="string">"socket"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>只需要修改XML配置文件，就可以切换：<br><figure class="highlight diff"><figcaption><span>切换插座的实现类</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- &lt;bean id="socket" class="Socket1" /&gt;</span></span><br><span class="line"><span class="addition">+ &lt;bean id="socket" class="Socket2" /&gt;</span></span><br><span class="line">&lt;bean id="user" class="xxx.User"&gt;</span><br><span class="line">    &lt;property name="socket" ref="socket" /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h3 id="1-2-Spring-AOP"><a href="#1-2-Spring-AOP" class="headerlink" title="1.2  Spring AOP"></a>1.2  Spring AOP</h3><h2 id="2-MyBatis简介"><a href="#2-MyBatis简介" class="headerlink" title="2.MyBatis简介"></a>2.MyBatis简介</h2><h3 id="2-1-Hibernate简介"><a href="#2-1-Hibernate简介" class="headerlink" title="2.1  Hibernate简介"></a>2.1  Hibernate简介</h3><h3 id="2-2-MyBatis"><a href="#2-2-MyBatis" class="headerlink" title="2.2  MyBatis"></a>2.2  MyBatis</h3><h3 id="2-3-Hibernate和MyBatis的区别"><a href="#2-3-Hibernate和MyBatis的区别" class="headerlink" title="2.3  Hibernate和MyBatis的区别"></a>2.3  Hibernate和MyBatis的区别</h3><h2 id="3-Spring-MVC简介"><a href="#3-Spring-MVC简介" class="headerlink" title="3.Spring MVC简介"></a>3.Spring MVC简介</h2><h2 id="4-最流行的NoSQL-–-Redis"><a href="#4-最流行的NoSQL-–-Redis" class="headerlink" title="4.最流行的NoSQL – Redis"></a>4.最流行的NoSQL – Redis</h2><h2 id="5-SSM-Redis结构框图及概述"><a href="#5-SSM-Redis结构框图及概述" class="headerlink" title="5.SSM+Redis结构框图及概述"></a>5.SSM+Redis结构框图及概述</h2><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;文章对以下要点进行总结和归纳：1)了解Spring IoC和Spring AOP的基础概念；2)了解MyBatis的特点；3)了解Spring MVC的特点；4)了解为什么要使用NoSQL(Redis)及Redis的优点；5)掌握SSM和Redis的基本结构框图和各种技术的作用。&lt;/p&gt;
    
    </summary>
    
      <category term="Java EE" scheme="https://www.blogs.rhsphere.com/categories/Java-EE/"/>
    
    
      <category term="Spring" scheme="https://www.blogs.rhsphere.com/tags/Spring/"/>
    
      <category term="Spring MVC" scheme="https://www.blogs.rhsphere.com/tags/Spring-MVC/"/>
    
      <category term="MyBatis" scheme="https://www.blogs.rhsphere.com/tags/MyBatis/"/>
    
      <category term="Redis" scheme="https://www.blogs.rhsphere.com/tags/Redis/"/>
    
  </entry>
  
</feed>
