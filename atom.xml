<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Depeng&#39;s Blog</title>
  
  <subtitle>北京邮电大学研究生在读</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.blogs.rhsphere.com/"/>
  <updated>2019-04-11T14:17:09.731Z</updated>
  <id>https://www.blogs.rhsphere.com/</id>
  
  <author>
    <name>Depeng Lu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第一次实验课备课</title>
    <link href="https://www.blogs.rhsphere.com/2019/04/07/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%9E%E9%AA%8C%E8%AF%BE%E5%A4%87%E8%AF%BE.html"/>
    <id>https://www.blogs.rhsphere.com/2019/04/07/第一次实验课备课.html</id>
    <published>2019-04-07T07:30:59.000Z</published>
    <updated>2019-04-11T14:17:09.731Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><h2 id="第一次实验课内容"><a href="#第一次实验课内容" class="headerlink" title="第一次实验课内容"></a>第一次实验课内容</h2><p>前三节课了解流水灯设计的IO口概念，熟悉实验箱和开发环境。最后一节课留给大家自己做实验。<br>三次实验，第一次是流水灯，第二次是双缓存，第三次是做综合试验，综合试验会用到中断的概念。</p><h2 id="实验箱简介（第一节课）"><a href="#实验箱简介（第一节课）" class="headerlink" title="实验箱简介（第一节课）"></a>实验箱简介（第一节课）</h2><h3 id="实验箱简介ppt"><a href="#实验箱简介ppt" class="headerlink" title="实验箱简介ppt"></a>实验箱简介ppt</h3><p>凡是做硬件实验要有三个东西，也就是三个要素，第一个就是你在PC机上安装一个软件，也就是Keil软件，根据你的想法，在开发环境中写好使流水灯跑起来的代码，然后通过编译链接生成二进制码，然后把二进制码通过下载器下载到目标实验箱上面去，PC机上安装这个软件主要就是生成可执行的二进制码，这是一个要素。<br>第二个要素就是下载器，可以看一下这个下载器，这个下载器不需要知道太多。 第三个就是实验箱，要使这个流水灯跑起来要熟悉实验箱和开发环境，下载器就不需要关注了。</p><p>打开实验箱介绍的ppt可以看一下  学习资料 -&gt; ppt -&gt; 01-实验箱简介.ppt</p><ol><li><p>凡是和硬件打交道一定要注意一点，注意电源问题。出问题时一定要先把电源切断。做实验室不要说把电源直接开，把所有准备工作做好，再把电源打开。 实验箱虽然上着电，但是电源是没有开的。所有准备工作做完了再去上电，不然容易烧东西。</p></li><li><p>实验箱模块布局，主要分为三部分：</p><ul><li>布局里面的外围设备（引脚 P3\p4\P1\P2）</li><li>左下ARM CPU（引脚是 P9\P10\P11\P12）</li><li><p>右下FPGA双缓存 （引脚P13）</p><p>FPGA与ARM板大部分通过桥接板连接，这里桥接板把CPU和FPGA已经直连了，因ARM和FPGA之间走的速度比较快，普通连接线会导致信号连接不稳定，桥接板提供稳定的高速通道。</p></li></ul></li><li><p>流水灯（P2接口）与ARM（P12接口）相应口，用杜邦线接起来，给它串起来。</p></li><li><p>FPGA要有一个宏观的认识就行了，具体使用的时候，再去查询</p></li><li><p>独立按键三引脚 高电平，低电平（持续低电平）和10ms低电平（相当于产生一个低电平脉冲）<br>想做一个中断，中断的事件是一个低电平脉冲触发，用这个按键产生一个沿</p></li><li><p>交通灯是一个十字路口的红黄绿灯，烟雾、温湿度传感器<br>，超声波这些模块是已经做好了的模块，里面的信号处理已经做好了，剩下的只是一个信号的接收的过程</p></li><li>直流电机和步进电机的区别 直流电机上电直接就会一直转；步进电机是一步一步的走的，给一个0000的信号不动，再给一个0001的信号转动18度</li><li>数码管 静态显示和动态显示</li><li>通信串口RS485对RS232进行了改进<ul><li>RS232模块传输距离有限，一根传输线只有一路信号，通过高低电平，按照美国110V电压的标准，如果在220V时带电插拔，会把周围的大地电平当成110V，就会烧毁元器件，接入后断电插拔，避免产生接地脉冲（过压、过流）</li><li>RS485由一根线传输改进为两根线，传输距离远，两路信号测量电压差值，用于车联网信号</li></ul></li><li>CP2102模块  USB信号</li><li>拿到实验箱后，左下角有白色按钮开关，另外不熟悉电路板的情况下，不要乱动跳线端子，以免导致电路出问题</li></ol><p>以上就是实验箱的基本情况，如果说涉及到不懂的接口，查看ARM板文档说明。</p><h3 id="MDK安装文档说明"><a href="#MDK安装文档说明" class="headerlink" title="MDK安装文档说明"></a>MDK安装文档说明</h3><p>打开文件夹 Arm -&gt; MDK5安装文档说明文档.doc<br>安装软件、添加器件库</p><ol><li>硬驱动满足电机特性，如功率等；软驱动满足软件的设置</li><li>下载到实验箱的文件就是USER/objects/xxx.axf文件</li></ol><h2 id="流水灯实验（第二节课）"><a href="#流水灯实验（第二节课）" class="headerlink" title="流水灯实验（第二节课）"></a>流水灯实验（第二节课）</h2><p>新建工程有4个步骤： 1.建工程 2.建文件夹 3.配置源文件 4.把源文件串起来</p><ol><li>1.4节实验原理讲解 （cpu与外围电路相连（P12 连接 P2接口））</li><li>实验箱连接 三种方式 实验指导书/文档、程序中的介绍、查看原理图</li><li>外围电路原理讲解（LED灯有相应的额定电流、额定电压与MCU IO的输出的电流、电压不一致，<br>可能会损毁器件，因此需要设计外围驱动电路，硬驱动（为了满足电流电压（电气特性）的要求）） 图1.5MOS管可以当成反相器</li></ol><p>放三极管把电流放大，电阻和三极管合在一起称为硬驱动<br>实验电路别人已经设计好了，但是如果要是自己去设计电路，就要按照这种思路，购买元器件，然后设计。</p><p>IO输入输出是阻塞的，同一时刻只有I或O，但是完成了输入输出的功能<br>CPU处理IO有两种方式，轮询和中断</p><p>推挽 是 驱动方式，具体是上拉或下拉<br>输入输出不接任何设备叫浮空<br>开漏输出：什么都不接<br>推挽输出：实际上是做了甲乙类功放电路</p><ol start="4"><li><p>1.4节（2）B）微控制器IO输出控制原理 讲解 图1.8中上拉电阻 下拉电阻 的作用（将不确定信号钳位在高低电平）</p></li><li><p>1.4节（3）实验过程<br>\资料下载\学习资料\ppt\02-外设介绍及配置  p7 p8 时钟理解</p></li></ol><h2 id="试验程序讲解和debug（第三节课）"><a href="#试验程序讲解和debug（第三节课）" class="headerlink" title="试验程序讲解和debug（第三节课）"></a>试验程序讲解和debug（第三节课）</h2><p>实验程序讲解</p><h2 id="自由实验（第三节课）"><a href="#自由实验（第三节课）" class="headerlink" title="自由实验（第三节课）"></a>自由实验（第三节课）</h2>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="实验" scheme="https://www.blogs.rhsphere.com/tags/%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>React项目实践</title>
    <link href="https://www.blogs.rhsphere.com/2019/03/27/React%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5.html"/>
    <id>https://www.blogs.rhsphere.com/2019/03/27/React项目实践.html</id>
    <published>2019-03-27T07:30:59.000Z</published>
    <updated>2019-03-27T08:50:16.342Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><h2 id="指定计划"><a href="#指定计划" class="headerlink" title="指定计划"></a>指定计划</h2><h3 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h3><h3 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h3><ul><li>前后端完全分离</li><li>单页应用</li><li>模块化开发</li></ul><h3 id="技术储备"><a href="#技术储备" class="headerlink" title="技术储备"></a>技术储备</h3><ul><li>React框架</li></ul><ul><li>React16 JSX表达式</li><li>React组件</li><li>生命周期</li></ul><ul><li>React-Router</li></ul><ul><li>浏览器路由原理</li><li>动态路由 VS 静态路由</li><li>React-Router</li></ul><ul><li><p>Sass Bootstrap </p></li><li><p>ES6语法</p></li></ul><ul><li>基础语法</li><li>Promise</li><li>面向对象</li></ul><ul><li>浏览器资源加载</li></ul><ul><li>URL结构</li><li>资源加载</li><li>浏览器渲染</li></ul><ul><li>本地存储</li></ul><ul><li>Cookie &amp;&amp; Seeeion</li><li>用户登录状态保持</li><li>H5本地存储</li></ul><ul><li>发布上线</li></ul><ul><li>Linux服务器配置</li><li>自动化发布脚本</li><li>域名解析</li></ul><h2 id="后台管理系统的需求分析及技术选型"><a href="#后台管理系统的需求分析及技术选型" class="headerlink" title="后台管理系统的需求分析及技术选型"></a>后台管理系统的需求分析及技术选型</h2><h3 id="核心需求"><a href="#核心需求" class="headerlink" title="核心需求"></a>核心需求</h3><p>根据实际情况来定义</p><h3 id="功能拆分"><a href="#功能拆分" class="headerlink" title="功能拆分"></a>功能拆分</h3><p>根据实际情况来定义</p><h3 id="技术选型–语言和框架"><a href="#技术选型–语言和框架" class="headerlink" title="技术选型–语言和框架"></a>技术选型–语言和框架</h3><ul><li>React</li><li>Sass + Bootstrap</li><li>ES6</li></ul><h3 id="技术选型–语言和框架-1"><a href="#技术选型–语言和框架-1" class="headerlink" title="技术选型–语言和框架"></a>技术选型–语言和框架</h3><ul><li>前后端分离</li><li>分层架构</li><li>模块化开发</li></ul><h3 id="技术选型–辅助工具"><a href="#技术选型–辅助工具" class="headerlink" title="技术选型–辅助工具"></a>技术选型–辅助工具</h3><p>node   npm安装速度慢，包之间的依赖关系很难搞</p><ul><li>yarn 包管理工具</li><li>webpack 代码打包</li><li>git 托管代码，做代码的版本维护</li></ul><h3 id="技术选型–发布过程"><a href="#技术选型–发布过程" class="headerlink" title="技术选型–发布过程"></a>技术选型–发布过程</h3><ul><li>环境配置</li><li>代码部署</li><li>nginx配置</li><li>域名配置</li></ul><h2 id="数据接口的定义"><a href="#数据接口的定义" class="headerlink" title="数据接口的定义"></a>数据接口的定义</h2><h3 id="接口文档规范–格式"><a href="#接口文档规范–格式" class="headerlink" title="接口文档规范–格式"></a>接口文档规范–格式</h3><h3 id="接口文档规范–请求和相应"><a href="#接口文档规范–请求和相应" class="headerlink" title="接口文档规范–请求和相应"></a>接口文档规范–请求和相应</h3><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring框架快速入门</title>
    <link href="https://www.blogs.rhsphere.com/2019/03/26/Spring%E6%A1%86%E6%9E%B6%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html"/>
    <id>https://www.blogs.rhsphere.com/2019/03/26/Spring框架快速入门.html</id>
    <published>2019-03-26T02:56:02.000Z</published>
    <updated>2019-03-26T02:56:02.783Z</updated>
    
    <content type="html"><![CDATA[<p class="description"></p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><p>##</p><p>##</p><p>##</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式之禅|6大设计原则</title>
    <link href="https://www.blogs.rhsphere.com/2019/03/23/solid-principles.html"/>
    <id>https://www.blogs.rhsphere.com/2019/03/23/solid-principles.html</id>
    <published>2019-03-23T08:15:50.000Z</published>
    <updated>2019-03-23T16:10:26.496Z</updated>
    
    <content type="html"><![CDATA[<p class="description">曾经对“设计模式”(Design Pattern)很膜拜，以为是最高大上的东西。现在看来更多的是前人总结的经验吧，了解一下就可以了，关键是要用的时候“熟能生巧”。最开始看的时候也正在学习Java，配合着这本书中的Java代码，感觉各种神奇。其实，Java语言设计之初为了避免像C++般复杂却过于简化了语法，结果大大降低了本身的表达能力。很多本来可以很简洁的代码，必须绕来绕去得写出来，这个时候就很需要利用设计模式来整理代码逻辑。另一方面，设计模式也还是有些用途的，尤其是在开发大型软件系统，很注重系统架构的设计和功能模块的解耦的场合。</p><p><img src="https://" alt="" style="width:100%"></p><a id="more"></a><p>题外话，UML类图中类之间的关系有：<br>泛化 = 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖</p><ol><li>泛化(Generalization)： 继承关系，子类继承父类 继承用实线三角箭头指向父类</li><li>实现(Realization)： 对接口的实现，类实现一个接口 继承接口用虚线三角箭头指向接口</li><li>组合(Composition)： 整体与部分的关系,但部分不能离开整体而单独存在  实心菱形，菱形指向整体</li><li>聚合(Aggregation)： 整体与部分的关系,且部分可以离开整体而单独存在 空心菱形，菱形指向整体</li><li>关联(Association)： 拥有的关系，让一个类知道另一个类的属性方法 实线箭头，箭头指向被关联的类</li><li>依赖(Dependency)： 一种使用的关系，即一个类的实现需要另一个类的协助，所以尽量不要使用双向的相互依赖，代码体现：局部变量、方法的参数或者调用类的静态方法 虚线箭头，指向被使用者</li></ol><p>软件分析与设计是编码前的2个阶段，分析仅与业务有关，而与技术无关，设计以分析为基础，与具体技术有关。</p><p>紧耦合 类间耦合过重 接口封装过度 类间解耦，弱耦合</p><h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><p>单一职责原则的英文名称是Single Responsibility Principle，简称是SRP。这个原则存在争议之处在对职责的定义，什么是类的职责，以及怎么划分类的职责。</p><p>RBAC模式（Role-Based Access Control，基于角色的访问控制，通过分配和取消角色来完成用户权限的授予和取消，使动作主体（用户）与资源的行为（权限）分离）。<br>把用户的信息抽取成一个BO（Business Object, 业务对象），把行为抽取成一个Biz（Business Logic，业务逻辑）。</p><p>SRP的定义是：应该有且仅有一个原因引起类的变更。<br>SRP的原话解释：<br> <strong>There should never be more than one reason for a class to change.</strong><br>就一个类而言，应该只有一个引起它变化的原因。</p><p>单一职责原则的优点：</p><ul><li>可以降低类的复杂度，实现什么职责都有清晰明确的定义；</li><li>提高类的可读性；</li><li>提高系统的可维护性；</li><li>变更引起的风险降低，变更是必然的，如果单一职责原则遵守的好，一个接口修改只对相应地实现类有影响，对其他的接口无影响，这对系统的扩展性、维护性都有非常大的帮助。</li></ul><p>单一职责原则要求一个接口或类只有一个原因引起变化，也就是一个接口或类只有一个职责，它就负责一件事。一个职责就是一个接口。<br>对于接口，我们在设计的时候一定要做到单一，但是对于实现类就需要多方面考虑了，可能不会满足单一职责原则。<br>单一职责适用于接口、类，同时也适用于方法。一个方法尽可能做一件事情。</p><h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><p>在实际项目中，每个子类对应不同的业务含义，使用父类作为参数，<strong>传递不同的子类完成不同的业务逻辑，</strong>非常完美。<br>里氏替换原则(LSP:Liskov Substitution Principle)的定义：</p><ol><li>第一种定义，也是最正宗的定义： <strong>If for each object o1 of type S there is an object o2 of type T such that for all programs P defined in terms of T, the behavior of P is unchanged when o1 is substituted for o2 then S is a subtype of T.</strong>（如果对每一个类型为S的对象o1，都有类型为T的对象o2，使得以T定义的所有程序P在所在的对象o1都代换为o2时，程序P的行为没有发生变化，那么类型S是类型T的字类型。）</li><li>第二种定义：<strong>Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.</strong>（所有引用基类的地方必须能透明地使用其子类的对象。）</li></ol><p>继承的优点：</p><ul><li>代码共享，减少创建类的工作量，每个子类都拥有父类的方法和属性。</li><li>提高代码的重用性。</li><li>子类可以形似父类，但又异于父类。</li><li>提高代码的可扩展性，只需实现父类的方法。</li><li>提高产品或项目的开放性。</li></ul><p>继承的缺点：</p><ul><li>继承是侵入性的。只要继承，就必须拥有父类的所有属性和方法。</li><li>降低代码的灵活性。子类必须拥有父类的属性和方法。</li><li>增强了耦合性。当父类的常量、变量和方法被修改时，必须要考虑子类的修改，而且在缺乏规范的环境下，这种修改可能带来非常糟糕的结果——大片代码需要重构。</li></ul><p><strong>在类中调用其他类时务必要使用父类或接口，如果不能使用负累或接口，则说明类的设计已经违背了LSP原则。</strong><br>里氏替换原则包含了4层含义：</p><ol><li>子类必须完全实现父类的方法<br>如果子类不能完整地实现父类的方法，或者父类的某些方法在子类中已经发生”畸变”，则建议断开父子继承关系，采用依赖、聚集、组合等关系代替继承。</li><li>子类可以有自己的个性<br>子类可以有自己的行为和外观，也就是方法和属性。</li><li>覆盖或实现父类的方法时输入参数可以被放大<br>子类的方法可以重载（Overload）父类的方法，并把输入参数设置成为父类的方法的输入参数的父类（即把输入参数放大）。这时，通过父类的引用调用这个方法，实际调用的还是父类的方法，子类的方法由于只是重载而不是覆写（Override），会被隐藏掉。子类可以覆写（Override）父类的方法。</li><li>覆写或实现父类的方法时输出结果可以被缩小<br>父类的方法返回值是一个类型T，子类的相同方法（重载或覆写）的返回值为S，那么里氏替换原则就要求S必须小于等于T，也就是说，要么S和T是同一个类型，要么S是T的子类。</li></ol><p>如果是覆写，父类和子类的同名方法的输入参数相同，两个方法的范围值S小于等于T，这是覆写的要求，这才是重中之重，子类覆写父类的方法，天经地义。</p><p>如果是重载，则要求方法的输入参数类型或数量不相同，在里氏替换原则要求下，就是子类的输入参数宽于或等于父类的输入参数，也就是说你写的这个方法是不会被调用的，参考上面讲的前置条件。</p><h2 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h2><p>依赖正置就是类间的依赖是实实在在的实现类间的依赖。</p><p>依赖倒置原则（Dependence Inversion Principle, DIP）的定义：<br><strong>High level modules should not depend upon low level modules. Both should depend upon abstractions. Abstractions should not depend upon details. Details should depend upon abstractions.</strong><br>翻译过来，有三重含义：</p><ol><li>高层模块不应该依赖底层模块，两者都应该依赖其抽象。</li><li>抽象不应该依赖细节。</li><li>细节应该依赖抽象。</li></ol><p>高层模块和低层模块容易理解，每一个逻辑的实现都是由原子逻辑组成的，不可分割的原子逻辑就是低层模块，原子逻辑的再组装就是高层模块。在Java中，抽象是指接口或抽象类，两者都不是不能直接被实例化的；细节就是实现类，实现接口或继承抽象类而产生的类就是细节，其特点就是可以直接被实例化。依赖倒置原则在Java语言中的表现就是：</p><ol><li>模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象类产生的。</li><li>接口或抽象类不依赖于实现类。</li><li>实现类依赖与接口或抽象类。</li></ol><p>更加精髓的定义就是 <strong>“面向接口编程”</strong>——面向对象设计的精髓之一。</p><p>采用依赖倒置原则可以减少类间的耦合性，提高系统的稳定性，降低并发开发引起的风险，提高代码的可读性和可维护性。</p><p><strong>依赖是可以传递的。只要做到抽象依赖，即使是多层的依赖传递也无所畏惧。</strong></p><p>依赖倒置原则要求我们在程序代码中传递参数时或在关联关系中，尽量 <strong>引用层次高的抽象层类</strong>，即使用 <strong>接口和抽象类进行变量类型声明、参数类型声明、方法返回类型声明</strong>，以及数据类型的转换等，而不要用具体类来做这些事情。</p><p>最佳实践：</p><ul><li>每个类尽量都有接口或抽象类，或者抽象类和接口两者都具备。接口负责定义public属性和方法，并且声明与其他对象的依赖关系，抽象类负责公共构造部分的实现，实现类准确的实现业务逻辑，同时在适当的世界对父类进行细化。</li><li>变量的表名类型尽量是接口或者抽象类。</li><li>任何类都不应该从具体类派生。</li><li>尽量不要覆写基类的方法。</li><li>结合里氏替换原则使用。</li></ul><p>对象的依赖关系又三种方式来传递：</p><ol><li>构造函数传递依赖对象</li><li>Setter方法传递依赖对象</li><li>接口声明依赖对象</li></ol><h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><p>接口的两种类型：</p><ol><li>实例接口（Object Interface），在Java中声明一个类，然后用new关键字产生一个实例，它是对一个类型的事物的描述，就是一种接口。</li><li>类接口（Class Interface），Java中经常使用的interface关键字定义的接口。<br>接口是我们设计时对外提供的契约。</li></ol><p>接口隔离原则(ISP：Interface Segregation Principle)定义：<br><strong>使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。</strong></p><p>根据接口隔离原则，当一个接口太大时，我们需要将它分割成一些更细小的接口，使用该接口的客户端仅需知道与之相关的方法即可。每一个接口应该承担一种相对独立的角色，不干不该干的事，该干的事都要干。</p><p>看到这里好像接口隔离原则与单一职责原则是相同的。其实接口隔离原则与单一职责原则的审视角度是不相同的，单一职责原则要求的是类和接口职责单一，注重的是职责，这是业务逻辑上的划分，而接口隔离原则要求接口的方法尽量少。</p><p>接口隔离原则是对接口进行规范约束，其包含的以下4层含义：</p><ol><li><p>接口要尽量小<br>这是接口隔离原则的核心定义。但是”小”是有限度的，首先就是不能违反单一职责原则，已经做到单一职责的接口不应该再分。即，根据接口隔离原则拆分接口时，首先必须满足单一职责原则。</p></li><li><p>接口要高内聚<br>高内聚就是提高接口、类、模块的处理能力，减少对外的交互。具体到接口隔离原则就是，要求在接口中尽量少公布public方法，接口是对外的承诺，承诺越少对系统的开发越有利，变更的风险也就越少，同时也有利于降低成本。</p></li><li><p>定制服务<br>定制服务就是单独为一个个体提供优良的服务。要求就是：只提供访问者需要的方法。</p></li><li><p>接口设计是有限度的<br>接口的设计粒度越小，系统越灵活。但是，灵活的同时也带来了结构的复杂化，开发难度增加，可维护性降低。所以接口设计一定要注意适度。</p></li></ol><p>最佳实践：</p><ul><li>一个接口只服务于一个子模块或业务逻辑。</li><li>通过业务逻辑压缩接口中的public方法，接口时常去回顾，尽量让接口达到“满身筋骨肉”，而不是“肥嘟嘟”的一大堆方法。</li><li>已经被污染了的接口，尽量去修改，若变更的风险较大，则采用适配器模式进行转化处理。</li><li>了解环境，拒绝盲从。环境不同，接口拆分的标准就不同，深入了解业务逻辑，根据实际情况设计接口。</li></ul><h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><p>最小知识原则（Least Knowledge Principle，LKP）：<br> <strong>一个对象应该对其他对象有最少的了解。</strong></p><p>通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少。<br>最小知识原则包含以下4层含义：</p><ol><li>只和朋友交流<br>Only talk to your immedate friends（只和直接朋友通信。）<br>两个对象之间的耦合就成为朋友关系。</li></ol><p>类和类之间的关系是建立在类间的，而不是方法间。<br><strong>朋友类：出现在在成员变量、方法的输入输出参数中的类成为成员朋友类</strong>，而出现在方法内部的类不属于朋友类。</p><ol start="2"><li><p>朋友间也是有距离的<br>朋友类之间也不应该暴露太多方法。<br>尽量不要对外公布太多的public和非静态的public变量，尽量内敛，多使用protected、package-private、protected等访问权限。</p></li><li><p>是自己的就是自己的<br><strong>如果一个方法放在本类中，既不增加类间关系，也对本类不产生负面影响，就放置在本类中。</strong></p></li><li><p>谨慎使用Serializable<br><strong>可能会因为对类的更改未在服务器和客户端之间同步而引起序列化失败问题。</strong></p></li></ol><p><strong>迪米特法则的核心观念就是类间解耦，弱耦合</strong></p><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><p>开闭原则(OCP:Open-Closed Principle)的定义：<br><strong>Software entities like classes, modules and functions should be open for extension but closed for modifications.（一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。）</strong><br>一个软件实体（模块、类、接口、方法）应该通过 <strong>扩展</strong>来实现变化，而不是通过修改已有的代码来实现变化。</p><p>开闭原则是最基本的原则，是其他原则和设计模式的精神。</p><p>开闭原则的重要性：</p><ul><li><p><strong>开闭原则对测试的影响</strong><br>所有已经投产的代码都是有意义的，并且都不受系统规则的约束。如果通过修改而不是扩展代码来应对需求变化，需要重新测试已经修改的代码。</p></li><li><p>开闭原则可以提高复用性<br>在面向对象的设计中，所有的逻辑都是从原子逻辑组合而来的，而不是在一个类中独立实现一个业务逻辑。</p></li><li><p>开闭原则可以提高可维护性</p></li><li>面向对象开发的要求<br>快速的应对变化，需要在设计之初就考虑所有可能变化的因素，然后留下接口。</li></ul><p>需求变化的三种类型：</p><ol><li><p>逻辑变化<br>可以通过修改原有类中的方法的方式来完成</p></li><li><p>子模块变化<br>通过扩展来应对</p></li><li><p>可见视图变化<br>可见视图是提供给客户使用的界面，该部分的变化一般会引起连锁反应，但还是可以通过扩展来完成变化，这就要看原来的设计是否灵活。</p></li></ol><p>应对需求变化的原则： <strong>保持历史的纯洁性，不去修改历史。</strong></p><p>应对需求变化的三种方法：</p><ol><li><p>修改接口<br>不可靠的，该方案应该被直接否定。</p></li><li><p>修改实现类<br>该方法在项目有明确的章程或优良的架构设计时，是一个非常优秀的方法，但是仍有缺陷。</p></li><li><p>通过扩展实现变化<br>好方法，修改少，风险小。</p></li></ol><p>最佳实践：</p><ol><li><p>抽象约束<br>首先通过接口或抽象类约束扩展，对扩展进行边界限定，不允许出现在接口或抽象类中不存在的public方法；第二，参数类型，引用对象尽量使用接口或者抽象类，而不是实现类；第三，抽象层尽量保持稳定，一旦确定既不允许修改。</p></li><li><p>元数据(metadata)控制模块行为<br>尽量使用元数据(用来描述环境和数据的数据，通俗的说就是配置参数)来控制程序的行为，减少重复开发。</p></li><li><p>制定项目章程<br>对于项目来说，约定优于配置。</p></li><li><p>封装变化<br>第一，将相同的变化封装到一个接口或抽象类中；第二，将不同的变化封装到不同的接口或抽象类中，不应该有两个不同的变化出现在同一个接口或抽象类中。</p></li></ol><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;曾经对“设计模式”(Design Pattern)很膜拜，以为是最高大上的东西。现在看来更多的是前人总结的经验吧，了解一下就可以了，关键是要用的时候“熟能生巧”。最开始看的时候也正在学习Java，配合着这本书中的Java代码，感觉各种神奇。其实，Java语言设计之初为了避免像C++般复杂却过于简化了语法，结果大大降低了本身的表达能力。很多本来可以很简洁的代码，必须绕来绕去得写出来，这个时候就很需要利用设计模式来整理代码逻辑。另一方面，设计模式也还是有些用途的，尤其是在开发大型软件系统，很注重系统架构的设计和功能模块的解耦的场合。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="DPModel" scheme="https://www.blogs.rhsphere.com/categories/DPModel/"/>
    
    
      <category term="DPModel" scheme="https://www.blogs.rhsphere.com/tags/DPModel/"/>
    
  </entry>
  
  <entry>
    <title>第一讲|先想后写——TCS三步构思法</title>
    <link href="https://www.blogs.rhsphere.com/2019/02/26/tone-content-structure.html"/>
    <id>https://www.blogs.rhsphere.com/2019/02/26/tone-content-structure.html</id>
    <published>2019-02-26T15:15:25.000Z</published>
    <updated>2019-02-27T14:34:43.935Z</updated>
    
    <content type="html"><![CDATA[<p class="description">职场写作最忌讳打开电脑就写，请你先想再写。TCS法三个步骤完成构思过程，即tone、content和structure，对应基调、内容和结构。</p><a id="more"></a><h2 id="基调为王，七种文案的标志性语气"><a href="#基调为王，七种文案的标志性语气" class="headerlink" title="基调为王，七种文案的标志性语气"></a>基调为王，七种文案的标志性语气</h2><p>第一步，基调，文章以基调为“王”。基调对了，事半功倍；基调错了，哪怕你传递的信息再重要，我也不会关注。<br>正确的基调能传递出文章真正的价值，也就是你的价值。职场写作可以分成四大类，那么每一类都需要传递你的什么价值呢？</p><ul><li>第一，总结类，写的是<span style="color:#bf91e8;">成绩</span>，呈现的是<span style="color:#FF0033;">你的潜力</span>；</li><li>第二，调查报告类，写的是<span style="color:#bf91e8;">调查结果</span>，呈现的是<span style="color:#FF0033;">你求实的态度</span>；</li><li>第三，申请类，内容是<span style="color:#bf91e8;">提问</span>，呈现的是<span style="color:#FF0033;">你主动的思考方式</span>；</li><li>第四，计划类，写的是<span style="color:#bf91e8;">阶段任务</span>，呈现的是<span style="color:#FF0033;">你的责任感</span>。</li></ul><p>如果明白了要呈现自己什么价值，那你拿捏起文章的基调来，正确的概率就会很高。</p><p><em>以常见的六种具体文案为例，探讨一下它们的标志性的基调。</em></p><h3 id="年终总结，基调要求：有深度"><a href="#年终总结，基调要求：有深度" class="headerlink" title="年终总结，基调要求：有深度"></a>年终总结，基调要求：有深度</h3><p>不要写成一份业绩的流水账——因为你的工作结果，领导在看你的总结之前就知道。可他为什么还要看？<br>他要读到你的分析能力；他希望你能从对工作感性的认知，上升到理性的规律性的总结；他需要你协助他，对未来做出更正确的决定。<br><span style="color:#5073b8;">由此来看，年终总结不是回顾，而是行动指南。</span>好的年终总结应该：</p><ul><li>会将工作成果写出意义，会提供难得的一线经验、不同的视角；</li><li>会在罗列了贡献之后，找出问题或机遇，以及怎样解决这个问题，或抓住这个机遇。<br>这就是“有深度”。</li></ul><h3 id="进展汇报，基调要求：不讨教"><a href="#进展汇报，基调要求：不讨教" class="headerlink" title="进展汇报，基调要求：不讨教"></a>进展汇报，基调要求：不讨教</h3><p>在进展汇报里，不能只提问题，向领导讨教，而应该给出方案，向领导汇报。讨教的公式是：您告诉我该怎么做。<span style="color:#5073b8;">汇报的公式是：我这样做，您同意吗？<br>这里我想提醒你，哪怕领导没有要求你写进展汇报，你也要养成定期向他汇报的习惯。</span><br>你需要将解决问题过程中的一些重要发现、关键结论、阶段性成果等小胜利，实时呈现给他，让他读出你的认真，让他看到你不断提高工作能力的过程。</p><h3 id="调查报告，基调要求：实事求是"><a href="#调查报告，基调要求：实事求是" class="headerlink" title="调查报告，基调要求：实事求是"></a>调查报告，基调要求：实事求是</h3><p>在收集充分的事实资料后，你的措辞是“资料显示、数字表明”，而不是“我认为、我估计”。这种报告才能展现事情的真相，才会有让人惊喜的收获。</p><h3 id="请示，基调要求：有主见"><a href="#请示，基调要求：有主见" class="headerlink" title="请示，基调要求：有主见"></a>请示，基调要求：有主见</h3><p>有的人这么写：</p><p><blockquote>“客户投诉如下，请指示。”</blockquote><br>不管是找领导要人、要钱，或其他任何资源，一定要有清晰的主见。<br>比如申请款项，你要给一个量化的标准让领导来裁决，不能模糊不清，让他无据可依、无处下手。<span style="color:#5073b8;">让他做选择题的时候，你也需要提供最佳选项。</span><br>另外，部门主管向上级递交请示的时候，不能采用传声筒的语气。<br>不要写“他们抱怨”或“他们声称”，要写“我注意到” “我相信我的团队会……”，这才是有担当、有主见的语气。</p><h3 id="批复，基调要求：态度明确"><a href="#批复，基调要求：态度明确" class="headerlink" title="批复，基调要求：态度明确"></a>批复，基调要求：态度明确</h3><p>不能出现这样的措辞：“似属可行” “酌情办理”。</p><h3 id="项目计划，基调要求：“可交付”"><a href="#项目计划，基调要求：“可交付”" class="headerlink" title="项目计划，基调要求：“可交付”"></a>项目计划，基调要求：“可交付”</h3><p>不能仅仅写行为。一个项目的成功，不是行动了就可以，而是众多可交付结果的总和。</p><ul><li>比如：“选择外部供应商”，这是写行为，改为可交付的结果：<strong>“确定外部供应商”</strong>。</li><li>又比如：“草拟消费者调查报告”，这又是写行为，改为可交付结果：<strong>“递交消费者调查报告”</strong>。</li></ul><p>这里我再和你多说一点。最好的项目计划书，是按照 <strong>OKR目标管理工具</strong>来写的。O：Objective 目标，KR：Key Results 关键结果。<br>简单地说，计划就是由目标和关键结果构成。其中，大目标可以分解成小目标，关键结果是用来衡量这些目标有没有完成的。按照这个工具来写，你的基调自然就是可交付的结果。<br><span style="background-color: #f0ad4e;">  以上就是构思的第一步——基调。</span></p><h2 id="从“作者逻辑”切换到“读者逻辑”"><a href="#从“作者逻辑”切换到“读者逻辑”" class="headerlink" title="从“作者逻辑”切换到“读者逻辑”"></a>从“作者逻辑”切换到“读者逻辑”</h2><p>TCS的第二步，C：content，内容。<br>你意识到了吗？我们在学校里的写作，读者是教授，他读你的文章的时候是有薪水拿的。在职场上的写作，可不是这样。<br><strong>职场上的读者，大多是“甲方读者”，比如领导、客户、重要合作伙伴，等等。也就是说，他们没有义务读完你的文章，他们可以随时终止阅读。</strong><br>怎么才能让这些甲方读者被你的内容吸引呢？请遵照这个原则：</p><p><blockquote>先从“作者逻辑”切换到“读者逻辑”，提供“所有必需信息”，然后按照“要话先说”的顺序排列。<br></blockquote><br>也就是说， 你的文章每个部分都要对读者有价值。<br>你写第一句话，是为了让他继续看第二句话；你写第二句话，是为了让他继续看第三句话。</p><p>举个例子，如果要写一份给投资人的商业计划书，俗称项目BP(Business Plan)。我们先做发散思维，想一想在初次接触时，投资人需要哪些信息来判断是否对项目有信心，是否愿意投资参与该项目？然后，为这些信息排序。<br>我最担心你一上来就急着展示自己公司有多厉害，这是作者逻辑。没搭好台就展示自己，操之过急。相反，文章应该从分析整个行业下手，彰显市场空缺。搭建好舞台后，才有机会介绍自己。<br>风险投资人也是要最大限度地规避风险的。而先选择行业，再选择个体，是他规避风险的方式，是读者逻辑。<br>按照这个逻辑，文章怎样写呢？</p><p><span style="background:#eee;"><em>第一部分</em></span>，写 <strong>“项目愿景”</strong>。 也就是，你要做一件什么样的大事。<br>这部分需要有一句高度精炼的话，比如黄太吉的“打造以煎饼果子为核心的中式时尚快餐连锁品牌”。<br>对方会问，这件事为什么值得做？于是你给出 <strong>“市场痛点”</strong>。<br>比如，摩拜单车是为了解决最后一公里的交通痛点。如果投资人根本不认为这是个痛点，后面一切都白写了。<br><span style="background:#eee;"><em>再往下</em></span>，是 <strong>“解决方案”</strong>。<br>论证的是，我们正在做的这个事业，真正能解决得了这个痛点，这把钥匙能开得了这把锁。OK,读者表示认同。<br><span style="background:#eee;"><em>然后</em></span>，他会想，<strong>“市场潜力”</strong>大吗？<br><span style="background:#eee;"><em>这时</em></span>，你该展示市场调查结果了，包括市场规模、用户画像、竞品分析等等。<br>那他会接着问，为什么要投你们，而不是别人呢？<br>你要阐述自己的 <strong>“独特优势”</strong>。包括行业经验、核心技术、牛人团队，等等。<br>OK, 这时读者对你有点儿感觉了。</p><p><span style="background:#eee;"><em>下一部分</em></span>，趁他对你有感觉的时候，拉着他一块儿画饼，你要写 <strong>“发展规划”</strong>了。<br>写清楚盈利模式和发展路径。也许你觉得奇怪，为什么这个内容现在才写？其实投资人很有经验，他只要决定和你一块儿干，他会在后期帮你一起完善盈利模式，清晰发展路径。</p><p><span style="background:#eee;"><em>最后</em></span>，做 <strong>“财务分析”</strong>，告诉他，你们缺多少钱。<br>为什么把融资额度放最后写呢？<br>你想想看，有经验的销售想把东西卖给你的时候，通常不会一上来就报价的。他们都是把商品的价值点全部讲完以后，才把价格说出来，这个时候出现的数字，会让对方觉得是个合理的数字。<br>至于 <strong>“退出机制” “利润分红”</strong>这些内容，在初次接触中并不重要，它们都有谈判的空间，所以可以不写。<br><span style="background-color: #f0ad4e;">在<strong>“要话先说”</strong>的顺序下，文章环环相扣，你前一部分阐述得精彩，读者才有兴趣问下一个问题，了解下一个部分。</span></p><h2 id="“向下想三层”，假设变结论"><a href="#“向下想三层”，假设变结论" class="headerlink" title="“向下想三层”，假设变结论"></a>“向下想三层”，假设变结论</h2><p>进入构思的第三步，TCS的S，structure结构。在你的文章里，可以用向下想三层的逻辑搭建金字塔结构。<span style="color:#5073b8;">金字塔的塔尖，是你鲜明的观点或建议，而下面两层，是证据。</span><br>在这个金字塔里，塔尖，<span style="color:#5073b8;">你鲜明的观点或建议</span>，是 <strong>“投钱给我们吧”</strong>。<br>读者自然会问：为什么？<br>金字塔第二层，两方面：因为有市场，因为我们强。<br>读者又问：有市场？——哪块市场？你们强？——强在哪里？<br>金字塔进入第三层的阐述。<br>这种顺序，让读者先读到塔尖，这样，不仅他能理解你更快，甚至认同你都更快。<br><span style="color:#5073b8;">因为塔尖就像一个熠熠生辉的宝石，抢先占据了他的阅读记忆，也许他会惴惴不安，也许他会兴奋不已，于是，在他接下来的阅读中，他会自己有意无意地将下面的证据与塔尖做链接，这个被说服过程由他自己来完成了。</span><br>这就是先想再写的TCS构思法。如果不这么做，文章可能会一点一点地偏离方向，最后主张模糊、脉络不明。而修改一份粗糙的文案，花费时间和力气更多。</p><h2 id="压缩三分之一的文字"><a href="#压缩三分之一的文字" class="headerlink" title="压缩三分之一的文字"></a>压缩三分之一的文字</h2><p>写完以后，还有一个步骤，<span style="color:#5073b8;">压缩，删掉三分之一的文字。</span>相信我，你可以做得到。 商务写作谨遵KISS原则：<span style="color:#5073b8;">keep it short and simple。</span> 句中不能有多余的词，段落中不能有多余的句子。<br>你可能会问我：文章到底是要简洁还是详实呢？<br><span style="color:#5073b8;">文字表达要简洁，内容提供要详实。</span><br>深度阐述和实例细节，会让文章更长，但不是冗长。 <strong>“用最少的字表达最多的意思”</strong>，这是我们追求的语言审美境界。<br>可以用这三个方法来做到 <strong>“减无可减”</strong>：</p><ul><li>把注水的文字压缩掉：“大概”、“一般来说”、“话说回来”，等等。</li><li>把“在我看来、我认为、我相信”之类的短语删掉，这是你写的文章，没有必要反复提醒读者这是你的观点。</li><li>把意思重复的句子压缩掉：相信读者是聪明人。</li></ul><p>简洁的文字体现自律。</p><h2 id="本讲小结"><a href="#本讲小结" class="headerlink" title="本讲小结"></a>本讲小结</h2><p>第一讲要结束了。在这一讲中，你要养成先想再写，然后再删的写作习惯。<br>写之前，做好TCS三步构思——基调、内容、结构。</p><p><span style="background:#EFF890;">第一步， 基调为王，用正确的基调传递出4类文案的真正价值；<br>第二步， 内容，提供“所有必需信息”，从“作者逻辑”切换到“读者逻辑”，并要话先说；<br>第三步， 结构，用向下想三层的金字塔结构，把你的假设，变成结论，用结论去说服他人。<br>最后， 商务写作的KISS原则要求我们压缩文章，我教了你三个方法。</span></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;职场写作最忌讳打开电脑就写，请你先想再写。TCS法三个步骤完成构思过程，即tone、content和structure，对应基调、内容和结构。&lt;/p&gt;
    
    </summary>
    
      <category term="得到" scheme="https://www.blogs.rhsphere.com/categories/%E5%BE%97%E5%88%B0/"/>
    
    
      <category term="得到，职场写作，软技能" scheme="https://www.blogs.rhsphere.com/tags/%E5%BE%97%E5%88%B0%EF%BC%8C%E8%81%8C%E5%9C%BA%E5%86%99%E4%BD%9C%EF%BC%8C%E8%BD%AF%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>得到|怎样提升你的职场写作能力</title>
    <link href="https://www.blogs.rhsphere.com/2019/02/24/improve-writing-skills-in-workplace.html"/>
    <id>https://www.blogs.rhsphere.com/2019/02/24/improve-writing-skills-in-workplace.html</id>
    <published>2019-02-24T09:21:59.000Z</published>
    <updated>2019-02-25T10:15:10.219Z</updated>
    
    <content type="html"><![CDATA[<p class="description">本文源自得到课程《有效提升你的职场写作能力》。作者戴愫老师，一名跨文化研究者，也是一名企业培训师。本系列共6讲和1个小结，干货满满，由思路清晰，思维缜密的戴愫老师娓娓道来。<br><b>前两讲是基础课</b>。养成正确的写作习惯——先想再写，然后删。写之前要“想”，想什么呢？用TCS三步构思法——基调、内容、结构。在基础课里，你会学到，在看似人人都会写的邮件里，蕴藏着怎样的高级套路。<b>第三讲和第四讲</b>，教你怎样给文章组织结构。当需要写复杂的文案时，怎样用四大思维能力组织一个高价值的文章，并且怎样写第一段，让文章的价值最大化。<b>最后两讲</b>，带你润色语言，为文章锦上添花——如何写出有权威性，又有亲和力的措辞，也就是让语言有质感、有温度。<b><em>版权归得到App所有，本文及相关内容仅供我个人总结和学习。</em></b></p><a id="more"></a><h2 id="三类职场人士的困惑是什么？"><a href="#三类职场人士的困惑是什么？" class="headerlink" title="三类职场人士的困惑是什么？"></a>三类职场人士的困惑是什么？</h2><p>戴愫老师和很多学员做过深度交流，有三类职场人士：</p><ul><li><span style="color:#5073b8;">第一类，职场小兵。他们专业技能强，需要简洁有力地从专业视角影响读者；他们经常需要写一些文章分享信息、阐述观点，比如项目进度报告、会议纪要、工作计划、可行性报告等。</span></li><li>第二类，职场老兵。他们需要通过写营运类报告，列出工作过程和结果，并把“成果”变成“功劳”，证明自己是未来的管理人才。</li><li>第三类，职场管理层。需要用高层的故事线来组织文章逻辑。比如说经常需要书写管理类报告，描述清楚商业逻辑，以便公司做出战略决策。</li></ul><p>很多人有以下困惑：</p><ul><li>因为工作太忙，需要快速成文的方法；</li><li>因为没有受过专门的商务写作的训练，分不清商务写作、文学写作、学术写作的清晰界线；</li><li>不知道如何从工作中收集一手资料，并从资料上构筑观点；</li><li>不知道如何以公司战略为风向标，提出自己的诉求，争取资源；</li><li>不知道怎样通过写作，把自己从“做事”的模式，调整为“做贡献”的心态；</li><li>写作时 <strong>容易用空洞的言辞，缺乏实质内容</strong>。</li></ul><h2 id="书面沟通到底是一项什么样的技能？"><a href="#书面沟通到底是一项什么样的技能？" class="headerlink" title="书面沟通到底是一项什么样的技能？"></a>书面沟通到底是一项什么样的技能？</h2><h3 id="书面沟通的形式是什么？单向，还是双向？"><a href="#书面沟通的形式是什么？单向，还是双向？" class="headerlink" title="书面沟通的形式是什么？单向，还是双向？"></a>书面沟通的形式是什么？单向，还是双向？</h3><p>书面沟通是一种单向沟通。你写，发给他，他读；或他写，发给你，你读。这是它最大的缺陷！<br>没有一个正常成年人喜欢“被通知、被命令”，大家都喜欢“被商量、被探讨”。这意味着，<span style="color:#5073b8;">我们作为作者，要通过“单向沟通的形式”，让读者读出“双向沟通的幻觉”。</span><br>制造这种幻觉很重要。为什么？我们来看第二点。</p><h3 id="判断一次沟通是不是100分，标准是什么？"><a href="#判断一次沟通是不是100分，标准是什么？" class="headerlink" title="判断一次沟通是不是100分，标准是什么？"></a>判断一次沟通是不是100分，标准是什么？</h3><p>这个标准是：<br>你明白我的意思了，或者我明白你的意思了？不，这只是60分的沟通。<br>我们把这件事儿办成了？这是80分。为什么只是80分，如果说这件事情是办成了，但我以后再也不想与你合作了，这就是赢了这场战役，失去了整个战争嘛，不行的。<br>那怎么做到100分呢？100分沟通的标准是，我和你理性、感性都达成一致了。注意，感性也要求达成一致。<br>职场上永远不要以为把事情搞定有多么难，真正难搞定的是“人”。哪怕是个纯技术问题，也是“人”的作为和不作为。</p><h3 id="达成一次100分沟通的基本前提是什么？"><a href="#达成一次100分沟通的基本前提是什么？" class="headerlink" title="达成一次100分沟通的基本前提是什么？"></a>达成一次100分沟通的基本前提是什么？</h3><p>是“信任”。 <span style="color:#5073b8;">信任是超越一切沟通形式、一切沟通技巧最基础的前提。</span><br>汉字的“信”，左边一个人，右边一个言，我们正常的顺序是，先相信这个人，再相信他说的话。这个顺序有可能放在每次书面沟通中吗？<br>没可能。很多时候，你和读者没有见过面，哪怕你们见过面，他对你的人格也不一定了解。<br>所以，我们需要学习：怎样在文章中大量使用信息化语言，在文字上与读者建立起信任，让他在不认识你，不熟知你的前提下，直接相信你写的话。</p><h3 id="书面沟通这项技能的本质"><a href="#书面沟通这项技能的本质" class="headerlink" title="书面沟通这项技能的本质"></a>书面沟通这项技能的本质</h3><p>作为写作者的你要用大量的信息化语言，在文字上与读者建立起信任（这是基本前提），并且，让读者通过单向沟通的形式，读出双向沟通的幻觉（这可以通过写作内容和文字表达来实现），最后，双方理性、感性都达成一致（这是100分沟通的衡量标准）。</p><p>重复一遍，书面沟通这项技能本质上就是：<br><span style="color:#5073b8;">作为写作者的你要用大量的信息化语言，在文字上与读者建立起信任，让读者通过单向沟通的形式，读出双向沟通的幻觉，最后双方理性、感性都达成一致。</span></p><h2 id="学完这门课，你能学到那些？"><a href="#学完这门课，你能学到那些？" class="headerlink" title="学完这门课，你能学到那些？"></a>学完这门课，你能学到那些？</h2><p>戴愫老师曾经用这门课，在线下教授了上万名职场人士，他们反馈：</p><ul><li>不仅会写了，而且写得更快了；</li><li>这堂写作课还帮助他们重塑了个人品牌；</li><li>他们通过写作打开了工作思维，写作为他们赢得了信任和尊重，从而，他们在公司里承担了更多的责任，职场道路开阔了。</li></ul><p>在写作时，有效表达只是最基本的层次，有效沟通才是终极目标。<br>每一次写作，并不是自己做了一次信息传递，每一次写作，你都在为读者创造一次阅读体验。<br>一篇好文章，不会让读者读完后困惑地问“so what”<strong>(所以呢?)</strong>，而是发出“wow”<strong>(diao a!)</strong>的赞叹。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;本文源自得到课程《有效提升你的职场写作能力》。作者戴愫老师，一名跨文化研究者，也是一名企业培训师。本系列共6讲和1个小结，干货满满，由思路清晰，思维缜密的戴愫老师娓娓道来。&lt;br&gt;&lt;b&gt;前两讲是基础课&lt;/b&gt;。养成正确的写作习惯——先想再写，然后删。写之前要“想”，想什么呢？用TCS三步构思法——基调、内容、结构。在基础课里，你会学到，在看似人人都会写的邮件里，蕴藏着怎样的高级套路。&lt;b&gt;第三讲和第四讲&lt;/b&gt;，教你怎样给文章组织结构。当需要写复杂的文案时，怎样用四大思维能力组织一个高价值的文章，并且怎样写第一段，让文章的价值最大化。&lt;b&gt;最后两讲&lt;/b&gt;，带你润色语言，为文章锦上添花——如何写出有权威性，又有亲和力的措辞，也就是让语言有质感、有温度。&lt;b&gt;&lt;em&gt;版权归得到App所有，本文及相关内容仅供我个人总结和学习。&lt;/em&gt;&lt;/b&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="得到" scheme="https://www.blogs.rhsphere.com/categories/%E5%BE%97%E5%88%B0/"/>
    
    
      <category term="得到，职场写作，软技能" scheme="https://www.blogs.rhsphere.com/tags/%E5%BE%97%E5%88%B0%EF%BC%8C%E8%81%8C%E5%9C%BA%E5%86%99%E4%BD%9C%EF%BC%8C%E8%BD%AF%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>认识SSM框架和Redis</title>
    <link href="https://www.blogs.rhsphere.com/2018/10/26/SSM-framework-Redis.html"/>
    <id>https://www.blogs.rhsphere.com/2018/10/26/SSM-framework-Redis.html</id>
    <published>2018-10-26T06:09:31.000Z</published>
    <updated>2019-02-25T10:02:52.445Z</updated>
    
    <content type="html"><![CDATA[<p class="description">文章对以下要点进行总结和归纳：1)了解Spring IoC和Spring AOP的基础概念；2)了解MyBatis的特点；3)了解Spring MVC的特点；4)了解为什么要使用NoSQL(Redis)及Redis的优点；5)掌握SSM和Redis的基本结构框图和各种技术的作用。</p><a id="more"></a><h2 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h2><p>Spring框架是Java应用最广的框架，它优秀的理念包括 <strong>IoC</strong> (Inversion of Control， 控制反转)和 <strong>AOP</strong> (Aspect Oriented Programming， 面向切面编程)。</p><h3 id="Spring-IoC简介"><a href="#Spring-IoC简介" class="headerlink" title="Spring IoC简介"></a>Spring IoC简介</h3><p>Spring IoC（Inversion of Control，控制反转）承担了一个资源管理、整合、即插即拔的功能。举个例子，在Java中我们为国家插座设计两种接口，那我们就可以为两种插座分别new两个对象，但是如果要更改上千次这种插座，难道要new很多对象吗？所以不用new的方式创建对象，而是使用配置的方式，然后使用配置的方式，然后让Spring IoC容器自己通过配置去找到插座。<br>不需要去找资源(Bean)，只要向Spring IoC容器描述所需资源，Spring IoC自己会找到你所需要的资源，这就是Spring IoC的理念。这样就把Bean之间的依赖关系解耦了，更容易写出结构清晰的程序。除此之外，Spring IoC还提供对Java Bean生命周期的管理，可以延迟加载，可以在其生命周期内定义一些行为等，更加有效地使用和管理Java资源。<br>如果使用new的方式来使用插座，代码如下。<br><figure class="highlight java"><figcaption><span>使用插座1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket1();</span><br><span class="line">user.setSocket(socket);</span><br><span class="line">user.useSocket();</span><br></pre></td></tr></table></figure></p><p>这样会有一个弊端，如果使用其他插座，就需要修改代码。可以使用配置的方式代替new的方式创建对象，让Spring IoC容器通过配置去找到插座。<br><figure class="highlight xml"><figcaption><span>使用Spring IoC注入插座1个用户</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"socket"</span> <span class="attr">class</span>=<span class="string">"Socket1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"xxx.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spanroperty</span> <span class="attr">name</span>=<span class="string">"socket"</span> <span class="attr">ref</span>=<span class="string">"socket"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>只需要修改XML配置文件，就可以切换：<br><figure class="highlight diff"><figcaption><span>切换插座的实现类</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- &lt;bean id="socket" class="Socket1" /&gt;</span></span><br><span class="line"><span class="addition">+ &lt;bean id="socket" class="Socket2" /&gt;</span></span><br><span class="line">&lt;bean id="user" class="xxx.User"&gt;</span><br><span class="line">    &lt;spanroperty name="socket" ref="socket" /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><p>显然，IoC的目标就是为了管理Bean而存在的。</p><h3 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h3><p>IoC的目标就是为了管理Bean，而Bean是Java面向对象(OOP)的基础设计，比如声明一个用户类、插座类等都是基于面向对象的概念。<br>有些情况是面向对象没办法处理的。<br>举个例子，生产部门的订单、生产部门、财务部门三者符合OOP的设计理念。订单发出，生产部门审批通过准备付款，但是财务部门发现订单的价格超支了，需要取消订单。 显然超支限定已经不只是影响财务部门了，还会影响生产部门之前所做的审批，需要把它们作废。把预算超支这个条件称为切面，它影响了订单、生产部门和财务部门3个OOP对象。在现实中，这样的切面条件跨越了3个甚至更多的对象，并且影响了它们的协作。所以只用OOP并不完善，还需要面向切面的编程，通过它去管理在切面上的某些对象之间的协作。<br>Spring AOP常用于数据库事务的编程，很多情况都如同上而的例子，我们在做完第一步数据库数据更新后，不知道下一步是否会成功，如果下一步失收，会使用数据库事务的回滚功能去回滚事务，使得第一步的数据库更新也作废。<br>在Spring AOP实现的数据库事务管理中，是以异常作为消息的。在默认的情况下(可以通过Spring的配置修改)，只要Spring接收到了异常信息，它就会将数据库的事务回滚，从而保证数据的一致性。这样我们就知道在Spring的事务管理中只要让它接收到异常信息，它就会回滚事务，而不需要通过代码来实现这个过程。<br>比如上面的例子，可用一段伪代码来进行一些必要的说明。<br><figure class="highlight java"><figcaption><span>Spring AOP处理订单伪代码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">proceed</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断生产部门是否通过订单，数据库记录订单</span></span><br><span class="line">    <span class="keyword">boolean</span> pflag = productionDept.isPass(order);</span><br><span class="line">    <span class="keyword">if</span>(pflag) &#123;<span class="comment">//如果生产部门通过进行财务部门审批</span></span><br><span class="line">        <span class="keyword">if</span> (financialDept.isOverBudget(order)) &#123;<span class="comment">//财务审批是否超限</span></span><br><span class="line">            <span class="comment">//抛出异常回滚事务，之前的订单操作也会被回滚</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"预算超限！！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Spring AOP的编程屏蔽了数据库代码，只需关注业务代码，知道只要发生了一场异常，Spring会回滚事务就足够了。</p><h2 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h2><p>MyBatis的前身是Apache的开源项目iBatis，是一个基于 Java的持久层框架。2010年这个项目由Apache software foundation迁移到Google code，并更名为MyBatis。2013年11月，MyBatis迁移到GitHub上，目前由GitHub提供维护。<br>MyBatis的优势在于灵活，它几乎可以代替JDBC，同时提供了接口编程。目前MyBatis的数据访问层 DAO(Data Access Objects)是不需要实现类的，它只需要一个接口和XML(或者注解)。MyBatis提供自动映射、动态SQL、级联、缓存、注解、代码和SQL分离等特性，使用方便，同时也可以对SQL进行优化。因为其具有封装少、映射多样化、支持存储过程、可以进行SQL优化等特点，使得它取代了Hibernate成为了Java互联网中首选的持久框架。<br>Hibernate作为一种十分流行的框架，它有其无可替代的优势，这里我们有必要讨论一下它和MyBatis的区别。由于MyBatis和Hibernate都是持久层框架，都会涉及数据库，所以首先定义一个数据库表一角色表(t_role)。<br><figure class="highlight sql"><figcaption><span>角色表的sql语句</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_role(</span><br><span class="line">    编号 <span class="built_in">int</span>(<span class="number">12</span>) primary <span class="keyword">key</span>，</span><br><span class="line">    角色名称 <span class="built_in">varchar</span>(<span class="number">60</span>)，</span><br><span class="line">    备注 <span class="built_in">varchar</span>(<span class="number">1024</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>用一个POJO(Plain Ordinary Java Object)和这张表定义的字段对应起来。<br><figure class="highlight java"><figcaption><span>定义角色POJO</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.chapter1.pojo;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="keyword">private</span> String note;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * setter and getter</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>无论是MyBatis还是Hibernate都是依靠某种方法，将数据库的表和POJO映射起来的，这样就可以操作POJO来完成相关的逻辑了。</p><h3 id="Hibernate简介"><a href="#Hibernate简介" class="headerlink" title="Hibernate简介"></a>Hibernate简介</h3><p>映射规则</p><table><thead><tr><th style="text-align:left">语言</th><th style="text-align:left">映射方法</th></tr></thead><tbody><tr><td style="text-align:left">MyBatis</td><td style="text-align:left">使用注解方式会受到一定的限制，通常使用XML方式实现映射关系</td></tr><tr><td style="text-align:left">Hibernate</td><td style="text-align:left">XML和注解提供映射规则</td></tr></tbody></table><p>把POJO对象和数据库表相互映射的框架称为对象关系映射(Object Relational Mapping，ORM，或O/RM，或O/R mapping)框架。Hibernate的设计理念是完全面向POJO的，不需要编写SQL就可以通过映射关系来操作数据库，是一种全表映射的体现；MyBatis需要提供SQL去运行。<br><figure class="highlight xml"><figcaption><span>Hibernate映射文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">  "http://www.hibernate.rg/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.learn.chapter1.pojo.Role"</span> <span class="attr">tbale</span>=<span class="string">"t_role"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"identity"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">spanroperty</span> <span class="attr">name</span>=<span class="string">"roleName"</span> <span class="attr">type</span>=<span class="string">"string"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"role_name"</span> <span class="attr">length</span>=<span class="string">"60"</span> <span class="attr">not-null</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">spanroperty</span> <span class="attr">name</span>=<span class="string">"note"</span> <span class="attr">type</span>=<span class="string">"string"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"note"</span> <span class="attr">length</span>=<span class="string">"512"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>首先，对POJO和表t_role进行了映射配置，把两者映射起来了。然后，对POJO进行操作，从而影响t_role表的数据，比如对其增删改查可以按照如下操作。<br><figure class="highlight java"><figcaption><span>Hibernate通过Session操作数据库数据</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Session session = <span class="keyword">null</span>;</span><br><span class="line">Transaction tx = <span class="keyword">null</span>;        </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//打开Session</span></span><br><span class="line">    session = HibernateUtil.getSessionFactory().openSession();</span><br><span class="line">    <span class="comment">//事务</span></span><br><span class="line">    tx = session.beginTransaction();</span><br><span class="line">    <span class="comment">//POJO</span></span><br><span class="line">    Role role = <span class="keyword">new</span> Role();</span><br><span class="line">    role.setId(<span class="number">1</span>);</span><br><span class="line">    role.setRoleName(<span class="string">"rolename1"</span>);</span><br><span class="line">    role.setNote(<span class="string">"note1"</span>);  <span class="comment">//保存</span></span><br><span class="line">    Role role2 = (Role) session.get(Role.class， <span class="number">1</span>); <span class="comment">//查询</span></span><br><span class="line">    role2.setNote(<span class="string">"修改备注"</span>);</span><br><span class="line">    session.update(role2); <span class="comment">//更新</span></span><br><span class="line">    System.err.println(role2.getRoleName());</span><br><span class="line">    session.delete(role2); <span class="comment">//删除</span></span><br><span class="line">    tx.commit(); <span class="comment">//提交事务</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">    <span class="keyword">if</span> (tx != <span class="keyword">null</span> &amp;&amp; tx.isActive()) &#123;</span><br><span class="line">        tx.rollback(); <span class="comment">//回滚事务</span></span><br><span class="line">    &#125;</span><br><span class="line">    ex.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (session != <span class="keyword">null</span> &amp;&amp; session.isOpen()) &#123;</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里没有SQL，因为Hibernate会根据映射关系来生成对应的SQL。</p><h3 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h3><p>可以自己拟定SQL规则，能精确定义SQL，从而符合移动互联网高并发、大数据、高性能、高响应的需求。MyBatis也需要映射文件把POJO和数据库的表对应起来。<br><figure class="highlight xml"><figcaption><span>MyBatis映射文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper   PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.learn.chapter1.mapper.RoleMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"roleMap"</span> <span class="attr">type</span>=<span class="string">"com.learn.chaper1.pojo.Role"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"roleName"</span> <span class="attr">column</span>=<span class="string">"role_name"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"note"</span> <span class="attr">column</span>=<span class="string">"note"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getRole"</span> <span class="attr">resultMap</span>=<span class="string">"roleMap"</span>&gt;</span></span><br><span class="line">        select id， role_name， note from t_rle where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteRole"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        delete from t_role where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertRole"</span> <span class="attr">parameterType</span>=<span class="string">"com.learn.chapter1.pojo.Role"</span>&gt;</span></span><br><span class="line">        insert into t_role(role_name， note) values(#&#123;roleName&#125;， #&#123;note&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateRole"</span> <span class="attr">parameterType</span>=<span class="string">"com.learn.chapter1.pojo.Role"</span>&gt;</span></span><br><span class="line">        update t_role set</span><br><span class="line">        role_name = #&#123;roleName&#125;，</span><br><span class="line">        note = #&#123;note&#125;</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里的resultMap元素用于定义映射规则，而实际上MyBatis在满足一定的规则下，完成自动映射，而增删改查对应着insert、delete、select、update四个元素。mapper元素中的namespace属性，要和一个接口的全限定名保持一致，而里面的SQL的id也需要和接口定义的方法完全保持一致，定义MyBatis映射文件。<br><figure class="highlight java"><figcaption><span>定义MyBatis映射文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.chapter1.mapper;</span><br><span class="line"><span class="keyword">import</span> com.learn.chapter1.pojo.Role;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Role <span class="title">getRole</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteRole</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertROle</span><span class="params">(Role role)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateROle</span><span class="params">(Role role)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定义了MyBatis映射文件，不需要定义一个实现类。<br><span style="color:#5073b8;">显然MyBatis在业务逻辑上和Hibernate是大同小异的。其区别在于，MyBatis需要提供接口和SQL，这意味着工作量会比较大，但是由于自定义SQL、映射关系，所以灵活性、可优化性超过了Hibernate。互联网可优化性、灵活性是十分重要的，因为一条SQL的性能可能相差十几倍到几十倍。</span></p><h3 id="Hibernate和MyBatis的区别"><a href="#Hibernate和MyBatis的区别" class="headerlink" title="Hibernate和MyBatis的区别"></a>Hibernate和MyBatis的区别</h3><p>Hibernate和MyBatis的增、删、改、查，对于业务逻辑层来说大同小异，对于映射层而言Hibernate的配置不需要接口和SQL，相反MyBatis是需要的。对于Hibernate而言，不需要编写大量的SQL，就可以完全映射，同时提供了日志、缓存、级联(级联比MyBatis强大)等特性，此外还提供HQL( Hibernate Query Language)对POJO进行操作，使用十分方便，但是它也有致命的缺陷。<br>由于无须SQL，当多表关联超过3个的时候，通过Hibernate的级联会造成太多性能的丢失，又或者我现在访问一个财务的表，然后它会关联财产信息表，财产又分为机械、原料等，显然机械和原料的字段是不一样的，这样关联字段只能根据特定的条件变化而变化而Hibernate无法支持这样的变化。遇到存储过程，Hibernate只能作罢。更为关键的是性能，在管理系统的时代，对于性能的要求不是那么苛刻，但是在互联网时代性能就是系统的根本，响应过慢就会丧失客户，试想一下谁会去用一个经常需要等待超过10秒以上的应用呢?<br>以上的问题MyBatis都可以解决，MyBatis可以自由书写SQL、支持动态SQL、处理列表、动态生成表名、支持存储过程。这样就可以灵活地定义查询语句，满足各类需求和性能优化的需要，这些在互联网系统中是十分重要的。<br>但MyBatis也有缺陷。首先，它要编写SQL和映射规则，其工作量稍微大于Hibernate。 其次，它支持的工具也很有限，不能像Hibernate那样有许多的插件可以帮助生成映射代码和关联关系，而即使使用生成工具，往往也需要开发者进一步简化，MyBatis通过手工编码，工作量相对大些。所以对于性能要求不太苛刻的系统，比如管理系统、ERP等推荐使用Hibernate;而对于性能要求高、响应快、灵活的系统则推荐使用MyBatis。</p><h2 id="Spring-MVC简介"><a href="#Spring-MVC简介" class="headerlink" title="Spring MVC简介"></a>Spring MVC简介</h2><p>也许你还在问为什么使用Spring MVC，Struts 2.x不才是主流吗？看SSH的概念多火!其实很多初学者都混淆了一个概念，SSH时间上指的是Struts 1.x + Spring + Hibernate，这个概念已经有十几年的历史了。在Structs 1.x的时代，Structs1.x是当之无愧的MVC框架的霸主，但是在新的MVC框架涌现的时代，形式已经完全不是这样的了，Structs 2.x借助了Structs 1.x的好名声，让国内开发者认为Structs 2.x是霸主继任者（其实两者在技术上没有任何关系），导致国内的很多程序员大多数学习基于Structs 2.x的框架，有一个貌似很火的概念出来了S2SH(Struts 2.x + Spring + Hibernate)整合开发。<br>根据JRebel厂商统计，Spring MVC的市场占有率是40%，而Structs 2.x只有可怜的6%。<span style="color:#5073b8;">Spring MVC是目前Java Web框架当之无愧的霸主。</span><br>Spring MVC和三层架构是什么关系，可能很多读者会抢答：<br>MVC：Model + View + Controller (数据模型+视图+控制器)<br>三层架构：Prensentation tier + Application tier + Data tier（展现层+应用层+数据访问层）<br>那MVC和三层架构有什么关系呢？但是实际上MVC只存在三层架构的展现层，M实际上是数据模型，是包含数据的对象。在Spring MVC里，有一个专门的类叫Model，用来和V之间的数据交互、传值；V指的是视图页面，包含JSP、freeMarker、Velocity、Thymeleaf、Tile等；C当然就是控制器（Spring MVC的注解@Controller的类）。<br>而三层架构是整个应用的架构，是由Spring框架负责管理的。一般项目中会有Service层、DAO层，这两个反馈在应用层和数据访问层。</p><h3 id="Java-EE应用的分层模型"><a href="#Java-EE应用的分层模型" class="headerlink" title="Java EE应用的分层模型"></a>Java EE应用的分层模型</h3><p>经典的Java EE架构大致上都可以分为如下几层：</p><ul><li><strong>Domain Object(领域对象)层</strong>。此层有一系列的POJO(Plain Object Java Object，普通的传统的Java对象)组成，这些对象是该系统的Domain Object(领域对象)，往往包含了各自所需实现的业务逻辑方法。</li><li><strong>DAO(Data Access Object，数据访问对象)层</strong>。此层由一系列的DAO组件组成，这些DAO实现了对数据库的创建、查询、更新和删除（CRUD）等原子操作。</li><li><strong>Service(业务逻辑)层</strong>。此层由一系列的业务逻辑对象组成，这些业务逻辑对象实现了系统所需的业务逻辑方法。这些业务逻辑方法可能仅仅用于暴露Domain Object对象所实现的业务逻辑方法，也可能是依赖DAO组件实现的业务逻辑方法。</li><li><strong>Controller(控制器)层</strong>。此层由一系列控制器组成，这些控制器用于拦截用户请求，并调用业务逻辑组件的业务逻辑方法，处理用户请求，并根据处理结果向不同的表现层组件转发。</li><li><strong>View(表现)层</strong>。此层由一系列的JSP页面、Velocity页面、PDF文档视图组件组成，负责手机用户请求，并显示处理结果。<h3 id="Java-EE应用的组件"><a href="#Java-EE应用的组件" class="headerlink" title="Java EE应用的组件"></a>Java EE应用的组件</h3>总体而言，Java EE应用应该大致包括如下几类组件：</li><li><strong>表现层组件</strong>。主要负责收集用户输入数据，或者想客户显示系统状态。最常用的表现层技术是JSP，但JSP并不是唯一的表现层技术。表现层还可以由Velocity、FreeMarker和Tapestry等技术完成，或者使用普通的应用程序充当表现层组件，甚至可以是小型智能设备。</li><li><strong>控制器组件</strong>。关于Java EE的MVC框架，其提供了一个前端核心控制器，核心控制器负责拦截用户请求，并将请求转发给用户实现的控制器组件。这些用户实现的控制器组件则负责调用业务逻辑方法，处理用户请求。</li><li><strong>业务逻辑组件</strong>。这是系统的核心组件，实现系统的业务逻辑。通常，一个业务逻辑方法对应一次用户操作。一个业务逻辑方法应该是一个整体，因此要求对业务逻辑方法增加事务性。业务逻辑方法仅仅实现也呜呜逻辑，不应该进行数据库访问。因此，业务逻辑组件中不应该出现原始的MyBatis、Hibernate和JDBC等API。<span style="color:#5073b8;">最重要的原因是：保证业务逻辑方法的实现与具体的持久层访问技术分离。当系统需要在不同持久层技术之间切换时，系统的业务逻辑组件无序任何改变。</span></li><li><strong>DAO组件</strong>。这个类型的对象比较缺乏变化，每个DAO组件都提供Domain Object对象基本的创建、查询、更新和删除等操作，这些操作对应于数据库的CRUD（创建、查询、更新和删除）等原子操作。当然，如果采用不同的持久层访问技术，DAO组件的会完全不同。为了实现业务逻辑组件的实现与DAO组件的实现分离，程序应该为每个DAO组件都提供接口，业务逻辑组件面向DAO接口编程，这样才能提供更好的解耦。</li><li><strong>领域对象组件</strong>。领域对象（Doamin Object）抽象了系统的对象模型。通常而言，这些领域对象的状态都必须保存在数据库里。因此，每个领域对象通常对应一个或多个数据表，领域对象通常需要提供对数据记录的访问方式。</li></ul><h2 id="最流行的NoSQL-–-Redis"><a href="#最流行的NoSQL-–-Redis" class="headerlink" title="最流行的NoSQL – Redis"></a>最流行的NoSQL – Redis</h2><p>NoSQL(Not Only SQL)存储的数据是半结构化的，Redis成为主要的NoSQL工具。</p><ol><li>响应速度快。</li><li>支持6种数据类型：字符串、哈希结构、列表、集合、可排序集合和基数。比如字符串可以存储Java基础数据类型，哈希可以存储对象，列表可以存储List对象等。</li><li>操作都是原子的。</li><li>MultiUtility工具：Redis可以再如缓存、、消息传递队列中使用（Reids支持“发布+订阅”的消息模式），在应用程序如Web应用程序绘画、网站页面点击数等任何短暂的数据中使用。</li></ol><h2 id="SSM-Redis结构框图及概述"><a href="#SSM-Redis结构框图及概述" class="headerlink" title="SSM+Redis结构框图及概述"></a>SSM+Redis结构框图及概述</h2><p>在Java Web中，以Spring + Spring MVC + MyBatis（SSM）作为主流框架，SSM+Redis的结构框图如下：<br><img src="/images/JavaEE/SSM-Redis-architecture.png" alt="SSM+Redis结构示意图"></p><ul><li>Spring IoC承担了一个资源管理、整合、即插即拔的功能。</li><li>Spring AOP可以提供切面管理，特别是书U哭事务管理的功能。</li><li>Spring MVC用于把模型、视图和控制器分层，组合成了一个有机灵活的系统。</li><li>MyBatis提供了一个数据库访问的持久层，通过MyBatis-Spring项目，它便能和Spring无缝对接。</li><li>Redis作为缓存工具，它提供了高速度处理数据和缓存数据的功能，使得系统大部分只需要访问缓存，而无须从数据库磁盘中重复读/写；在一些需要高速运算的场合中，也可以先用它来完成运算，再把数据批量存入数据库，这样便能极大地提升互联网系统的性能和响应能力。</li></ul><p>在后面会讲解这些技术的使用方法、原理和优化方法。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;description&quot;&gt;文章对以下要点进行总结和归纳：1)了解Spring IoC和Spring AOP的基础概念；2)了解MyBatis的特点；3)了解Spring MVC的特点；4)了解为什么要使用NoSQL(Redis)及Redis的优点；5)掌握SSM和Redis的基本结构框图和各种技术的作用。&lt;/p&gt;
    
    </summary>
    
      <category term="Java EE" scheme="https://www.blogs.rhsphere.com/categories/Java-EE/"/>
    
    
      <category term="Spring， Spring MVC， MyBatis， Redis" scheme="https://www.blogs.rhsphere.com/tags/Spring%EF%BC%8C-Spring-MVC%EF%BC%8C-MyBatis%EF%BC%8C-Redis/"/>
    
  </entry>
  
</feed>
